// Demo1_altera_mm_interconnect_1920_a543wpy.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 21.3 170

`timescale 1 ps / 1 ps
 `include "module.v" 

module Demo1_altera_mm_interconnect_1920_a543wpy (
		input  wire [31:0] intel_niosv_m_0_data_manager_awaddr,               //                intel_niosv_m_0_data_manager.awaddr
		input  wire [2:0]  intel_niosv_m_0_data_manager_awsize,               //                                            .awsize
		input  wire [2:0]  intel_niosv_m_0_data_manager_awprot,               //                                            .awprot
		input  wire        intel_niosv_m_0_data_manager_awvalid,              //                                            .awvalid
		output wire        intel_niosv_m_0_data_manager_awready,              //                                            .awready
		input  wire [31:0] intel_niosv_m_0_data_manager_wdata,                //                                            .wdata
		input  wire [3:0]  intel_niosv_m_0_data_manager_wstrb,                //                                            .wstrb
		input  wire        intel_niosv_m_0_data_manager_wlast,                //                                            .wlast
		input  wire        intel_niosv_m_0_data_manager_wvalid,               //                                            .wvalid
		output wire        intel_niosv_m_0_data_manager_wready,               //                                            .wready
		output wire [1:0]  intel_niosv_m_0_data_manager_bresp,                //                                            .bresp
		output wire        intel_niosv_m_0_data_manager_bvalid,               //                                            .bvalid
		input  wire        intel_niosv_m_0_data_manager_bready,               //                                            .bready
		input  wire [31:0] intel_niosv_m_0_data_manager_araddr,               //                                            .araddr
		input  wire [2:0]  intel_niosv_m_0_data_manager_arsize,               //                                            .arsize
		input  wire [2:0]  intel_niosv_m_0_data_manager_arprot,               //                                            .arprot
		input  wire        intel_niosv_m_0_data_manager_arvalid,              //                                            .arvalid
		output wire        intel_niosv_m_0_data_manager_arready,              //                                            .arready
		output wire [31:0] intel_niosv_m_0_data_manager_rdata,                //                                            .rdata
		output wire [1:0]  intel_niosv_m_0_data_manager_rresp,                //                                            .rresp
		output wire        intel_niosv_m_0_data_manager_rvalid,               //                                            .rvalid
		input  wire        intel_niosv_m_0_data_manager_rready,               //                                            .rready
		input  wire [31:0] intel_niosv_m_0_instruction_manager_awaddr,        //         intel_niosv_m_0_instruction_manager.awaddr
		input  wire [2:0]  intel_niosv_m_0_instruction_manager_awsize,        //                                            .awsize
		input  wire [2:0]  intel_niosv_m_0_instruction_manager_awprot,        //                                            .awprot
		input  wire        intel_niosv_m_0_instruction_manager_awvalid,       //                                            .awvalid
		output wire        intel_niosv_m_0_instruction_manager_awready,       //                                            .awready
		input  wire [31:0] intel_niosv_m_0_instruction_manager_wdata,         //                                            .wdata
		input  wire [3:0]  intel_niosv_m_0_instruction_manager_wstrb,         //                                            .wstrb
		input  wire        intel_niosv_m_0_instruction_manager_wlast,         //                                            .wlast
		input  wire        intel_niosv_m_0_instruction_manager_wvalid,        //                                            .wvalid
		output wire        intel_niosv_m_0_instruction_manager_wready,        //                                            .wready
		output wire [1:0]  intel_niosv_m_0_instruction_manager_bresp,         //                                            .bresp
		output wire        intel_niosv_m_0_instruction_manager_bvalid,        //                                            .bvalid
		input  wire        intel_niosv_m_0_instruction_manager_bready,        //                                            .bready
		input  wire [31:0] intel_niosv_m_0_instruction_manager_araddr,        //                                            .araddr
		input  wire [2:0]  intel_niosv_m_0_instruction_manager_arsize,        //                                            .arsize
		input  wire [2:0]  intel_niosv_m_0_instruction_manager_arprot,        //                                            .arprot
		input  wire        intel_niosv_m_0_instruction_manager_arvalid,       //                                            .arvalid
		output wire        intel_niosv_m_0_instruction_manager_arready,       //                                            .arready
		output wire [31:0] intel_niosv_m_0_instruction_manager_rdata,         //                                            .rdata
		output wire [1:0]  intel_niosv_m_0_instruction_manager_rresp,         //                                            .rresp
		output wire        intel_niosv_m_0_instruction_manager_rvalid,        //                                            .rvalid
		input  wire        intel_niosv_m_0_instruction_manager_rready,        //                                            .rready
		output wire [0:0]  jtag_uart_0_avalon_jtag_slave_address,             //               jtag_uart_0_avalon_jtag_slave.address
		output wire        jtag_uart_0_avalon_jtag_slave_write,               //                                            .write
		output wire        jtag_uart_0_avalon_jtag_slave_read,                //                                            .read
		input  wire [31:0] jtag_uart_0_avalon_jtag_slave_readdata,            //                                            .readdata
		output wire [31:0] jtag_uart_0_avalon_jtag_slave_writedata,           //                                            .writedata
		input  wire        jtag_uart_0_avalon_jtag_slave_waitrequest,         //                                            .waitrequest
		output wire        jtag_uart_0_avalon_jtag_slave_chipselect,          //                                            .chipselect
		output wire [15:0] intel_niosv_m_0_dm_agent_address,                  //                    intel_niosv_m_0_dm_agent.address
		output wire        intel_niosv_m_0_dm_agent_write,                    //                                            .write
		output wire        intel_niosv_m_0_dm_agent_read,                     //                                            .read
		input  wire [31:0] intel_niosv_m_0_dm_agent_readdata,                 //                                            .readdata
		output wire [31:0] intel_niosv_m_0_dm_agent_writedata,                //                                            .writedata
		input  wire        intel_niosv_m_0_dm_agent_readdatavalid,            //                                            .readdatavalid
		input  wire        intel_niosv_m_0_dm_agent_waitrequest,              //                                            .waitrequest
		output wire [9:0]  onchip_memory2_0_s1_address,                       //                         onchip_memory2_0_s1.address
		output wire        onchip_memory2_0_s1_write,                         //                                            .write
		input  wire [31:0] onchip_memory2_0_s1_readdata,                      //                                            .readdata
		output wire [31:0] onchip_memory2_0_s1_writedata,                     //                                            .writedata
		output wire [3:0]  onchip_memory2_0_s1_byteenable,                    //                                            .byteenable
		output wire        onchip_memory2_0_s1_chipselect,                    //                                            .chipselect
		output wire        onchip_memory2_0_s1_clken,                         //                                            .clken
		output wire [5:0]  intel_niosv_m_0_timer_sw_agent_address,            //              intel_niosv_m_0_timer_sw_agent.address
		output wire        intel_niosv_m_0_timer_sw_agent_write,              //                                            .write
		output wire        intel_niosv_m_0_timer_sw_agent_read,               //                                            .read
		input  wire [31:0] intel_niosv_m_0_timer_sw_agent_readdata,           //                                            .readdata
		output wire [31:0] intel_niosv_m_0_timer_sw_agent_writedata,          //                                            .writedata
		output wire [3:0]  intel_niosv_m_0_timer_sw_agent_byteenable,         //                                            .byteenable
		input  wire        intel_niosv_m_0_timer_sw_agent_readdatavalid,      //                                            .readdatavalid
		input  wire        intel_niosv_m_0_reset_reset_bridge_in_reset_reset, // intel_niosv_m_0_reset_reset_bridge_in_reset.reset
		input  wire        clock_in_out_clk_clk                               //                            clock_in_out_clk.clk
	);

	wire    [0:0] intel_niosv_m_0_data_manager_translator_m0_ruser;                     // intel_niosv_m_0_data_manager_agent:ruser -> intel_niosv_m_0_data_manager_translator:m0_ruser
	wire    [0:0] intel_niosv_m_0_data_manager_translator_m0_wuser;                     // intel_niosv_m_0_data_manager_translator:m0_wuser -> intel_niosv_m_0_data_manager_agent:wuser
	wire    [1:0] intel_niosv_m_0_data_manager_translator_m0_awburst;                   // intel_niosv_m_0_data_manager_translator:m0_awburst -> intel_niosv_m_0_data_manager_agent:awburst
	wire    [3:0] intel_niosv_m_0_data_manager_translator_m0_arregion;                  // intel_niosv_m_0_data_manager_translator:m0_arregion -> intel_niosv_m_0_data_manager_agent:arregion
	wire    [0:0] intel_niosv_m_0_data_manager_translator_m0_awuser;                    // intel_niosv_m_0_data_manager_translator:m0_awuser -> intel_niosv_m_0_data_manager_agent:awuser
	wire    [7:0] intel_niosv_m_0_data_manager_translator_m0_arlen;                     // intel_niosv_m_0_data_manager_translator:m0_arlen -> intel_niosv_m_0_data_manager_agent:arlen
	wire    [3:0] intel_niosv_m_0_data_manager_translator_m0_arqos;                     // intel_niosv_m_0_data_manager_translator:m0_arqos -> intel_niosv_m_0_data_manager_agent:arqos
	wire    [3:0] intel_niosv_m_0_data_manager_translator_m0_wstrb;                     // intel_niosv_m_0_data_manager_translator:m0_wstrb -> intel_niosv_m_0_data_manager_agent:wstrb
	wire          intel_niosv_m_0_data_manager_translator_m0_wready;                    // intel_niosv_m_0_data_manager_agent:wready -> intel_niosv_m_0_data_manager_translator:m0_wready
	wire    [0:0] intel_niosv_m_0_data_manager_translator_m0_rid;                       // intel_niosv_m_0_data_manager_agent:rid -> intel_niosv_m_0_data_manager_translator:m0_rid
	wire          intel_niosv_m_0_data_manager_translator_m0_rready;                    // intel_niosv_m_0_data_manager_translator:m0_rready -> intel_niosv_m_0_data_manager_agent:rready
	wire    [7:0] intel_niosv_m_0_data_manager_translator_m0_awlen;                     // intel_niosv_m_0_data_manager_translator:m0_awlen -> intel_niosv_m_0_data_manager_agent:awlen
	wire    [3:0] intel_niosv_m_0_data_manager_translator_m0_awqos;                     // intel_niosv_m_0_data_manager_translator:m0_awqos -> intel_niosv_m_0_data_manager_agent:awqos
	wire    [3:0] intel_niosv_m_0_data_manager_translator_m0_arcache;                   // intel_niosv_m_0_data_manager_translator:m0_arcache -> intel_niosv_m_0_data_manager_agent:arcache
	wire          intel_niosv_m_0_data_manager_translator_m0_wvalid;                    // intel_niosv_m_0_data_manager_translator:m0_wvalid -> intel_niosv_m_0_data_manager_agent:wvalid
	wire   [31:0] intel_niosv_m_0_data_manager_translator_m0_araddr;                    // intel_niosv_m_0_data_manager_translator:m0_araddr -> intel_niosv_m_0_data_manager_agent:araddr
	wire    [2:0] intel_niosv_m_0_data_manager_translator_m0_arprot;                    // intel_niosv_m_0_data_manager_translator:m0_arprot -> intel_niosv_m_0_data_manager_agent:arprot
	wire    [2:0] intel_niosv_m_0_data_manager_translator_m0_awprot;                    // intel_niosv_m_0_data_manager_translator:m0_awprot -> intel_niosv_m_0_data_manager_agent:awprot
	wire   [31:0] intel_niosv_m_0_data_manager_translator_m0_wdata;                     // intel_niosv_m_0_data_manager_translator:m0_wdata -> intel_niosv_m_0_data_manager_agent:wdata
	wire          intel_niosv_m_0_data_manager_translator_m0_arvalid;                   // intel_niosv_m_0_data_manager_translator:m0_arvalid -> intel_niosv_m_0_data_manager_agent:arvalid
	wire    [3:0] intel_niosv_m_0_data_manager_translator_m0_awcache;                   // intel_niosv_m_0_data_manager_translator:m0_awcache -> intel_niosv_m_0_data_manager_agent:awcache
	wire    [0:0] intel_niosv_m_0_data_manager_translator_m0_arid;                      // intel_niosv_m_0_data_manager_translator:m0_arid -> intel_niosv_m_0_data_manager_agent:arid
	wire    [0:0] intel_niosv_m_0_data_manager_translator_m0_arlock;                    // intel_niosv_m_0_data_manager_translator:m0_arlock -> intel_niosv_m_0_data_manager_agent:arlock
	wire    [0:0] intel_niosv_m_0_data_manager_translator_m0_awlock;                    // intel_niosv_m_0_data_manager_translator:m0_awlock -> intel_niosv_m_0_data_manager_agent:awlock
	wire   [31:0] intel_niosv_m_0_data_manager_translator_m0_awaddr;                    // intel_niosv_m_0_data_manager_translator:m0_awaddr -> intel_niosv_m_0_data_manager_agent:awaddr
	wire    [1:0] intel_niosv_m_0_data_manager_translator_m0_bresp;                     // intel_niosv_m_0_data_manager_agent:bresp -> intel_niosv_m_0_data_manager_translator:m0_bresp
	wire          intel_niosv_m_0_data_manager_translator_m0_arready;                   // intel_niosv_m_0_data_manager_agent:arready -> intel_niosv_m_0_data_manager_translator:m0_arready
	wire   [31:0] intel_niosv_m_0_data_manager_translator_m0_rdata;                     // intel_niosv_m_0_data_manager_agent:rdata -> intel_niosv_m_0_data_manager_translator:m0_rdata
	wire          intel_niosv_m_0_data_manager_translator_m0_awready;                   // intel_niosv_m_0_data_manager_agent:awready -> intel_niosv_m_0_data_manager_translator:m0_awready
	wire    [1:0] intel_niosv_m_0_data_manager_translator_m0_arburst;                   // intel_niosv_m_0_data_manager_translator:m0_arburst -> intel_niosv_m_0_data_manager_agent:arburst
	wire    [2:0] intel_niosv_m_0_data_manager_translator_m0_arsize;                    // intel_niosv_m_0_data_manager_translator:m0_arsize -> intel_niosv_m_0_data_manager_agent:arsize
	wire          intel_niosv_m_0_data_manager_translator_m0_bready;                    // intel_niosv_m_0_data_manager_translator:m0_bready -> intel_niosv_m_0_data_manager_agent:bready
	wire          intel_niosv_m_0_data_manager_translator_m0_rlast;                     // intel_niosv_m_0_data_manager_agent:rlast -> intel_niosv_m_0_data_manager_translator:m0_rlast
	wire          intel_niosv_m_0_data_manager_translator_m0_wlast;                     // intel_niosv_m_0_data_manager_translator:m0_wlast -> intel_niosv_m_0_data_manager_agent:wlast
	wire    [3:0] intel_niosv_m_0_data_manager_translator_m0_awregion;                  // intel_niosv_m_0_data_manager_translator:m0_awregion -> intel_niosv_m_0_data_manager_agent:awregion
	wire    [0:0] intel_niosv_m_0_data_manager_translator_m0_buser;                     // intel_niosv_m_0_data_manager_agent:buser -> intel_niosv_m_0_data_manager_translator:m0_buser
	wire    [1:0] intel_niosv_m_0_data_manager_translator_m0_rresp;                     // intel_niosv_m_0_data_manager_agent:rresp -> intel_niosv_m_0_data_manager_translator:m0_rresp
	wire    [0:0] intel_niosv_m_0_data_manager_translator_m0_awid;                      // intel_niosv_m_0_data_manager_translator:m0_awid -> intel_niosv_m_0_data_manager_agent:awid
	wire    [0:0] intel_niosv_m_0_data_manager_translator_m0_bid;                       // intel_niosv_m_0_data_manager_agent:bid -> intel_niosv_m_0_data_manager_translator:m0_bid
	wire          intel_niosv_m_0_data_manager_translator_m0_bvalid;                    // intel_niosv_m_0_data_manager_agent:bvalid -> intel_niosv_m_0_data_manager_translator:m0_bvalid
	wire    [2:0] intel_niosv_m_0_data_manager_translator_m0_awsize;                    // intel_niosv_m_0_data_manager_translator:m0_awsize -> intel_niosv_m_0_data_manager_agent:awsize
	wire          intel_niosv_m_0_data_manager_translator_m0_awvalid;                   // intel_niosv_m_0_data_manager_translator:m0_awvalid -> intel_niosv_m_0_data_manager_agent:awvalid
	wire    [0:0] intel_niosv_m_0_data_manager_translator_m0_aruser;                    // intel_niosv_m_0_data_manager_translator:m0_aruser -> intel_niosv_m_0_data_manager_agent:aruser
	wire          intel_niosv_m_0_data_manager_translator_m0_rvalid;                    // intel_niosv_m_0_data_manager_agent:rvalid -> intel_niosv_m_0_data_manager_translator:m0_rvalid
	wire          rsp_mux_src_valid;                                                    // rsp_mux:src_valid -> intel_niosv_m_0_data_manager_agent:write_rp_valid
	wire  [129:0] rsp_mux_src_data;                                                     // rsp_mux:src_data -> intel_niosv_m_0_data_manager_agent:write_rp_data
	wire          rsp_mux_src_ready;                                                    // intel_niosv_m_0_data_manager_agent:write_rp_ready -> rsp_mux:src_ready
	wire    [3:0] rsp_mux_src_channel;                                                  // rsp_mux:src_channel -> intel_niosv_m_0_data_manager_agent:write_rp_channel
	wire          rsp_mux_src_startofpacket;                                            // rsp_mux:src_startofpacket -> intel_niosv_m_0_data_manager_agent:write_rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                              // rsp_mux:src_endofpacket -> intel_niosv_m_0_data_manager_agent:write_rp_endofpacket
	wire          rsp_mux_001_src_valid;                                                // rsp_mux_001:src_valid -> intel_niosv_m_0_data_manager_agent:read_rp_valid
	wire  [129:0] rsp_mux_001_src_data;                                                 // rsp_mux_001:src_data -> intel_niosv_m_0_data_manager_agent:read_rp_data
	wire          rsp_mux_001_src_ready;                                                // intel_niosv_m_0_data_manager_agent:read_rp_ready -> rsp_mux_001:src_ready
	wire    [3:0] rsp_mux_001_src_channel;                                              // rsp_mux_001:src_channel -> intel_niosv_m_0_data_manager_agent:read_rp_channel
	wire          rsp_mux_001_src_startofpacket;                                        // rsp_mux_001:src_startofpacket -> intel_niosv_m_0_data_manager_agent:read_rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                          // rsp_mux_001:src_endofpacket -> intel_niosv_m_0_data_manager_agent:read_rp_endofpacket
	wire    [0:0] intel_niosv_m_0_instruction_manager_translator_m0_ruser;              // intel_niosv_m_0_instruction_manager_agent:ruser -> intel_niosv_m_0_instruction_manager_translator:m0_ruser
	wire    [0:0] intel_niosv_m_0_instruction_manager_translator_m0_wuser;              // intel_niosv_m_0_instruction_manager_translator:m0_wuser -> intel_niosv_m_0_instruction_manager_agent:wuser
	wire    [1:0] intel_niosv_m_0_instruction_manager_translator_m0_awburst;            // intel_niosv_m_0_instruction_manager_translator:m0_awburst -> intel_niosv_m_0_instruction_manager_agent:awburst
	wire    [3:0] intel_niosv_m_0_instruction_manager_translator_m0_arregion;           // intel_niosv_m_0_instruction_manager_translator:m0_arregion -> intel_niosv_m_0_instruction_manager_agent:arregion
	wire    [0:0] intel_niosv_m_0_instruction_manager_translator_m0_awuser;             // intel_niosv_m_0_instruction_manager_translator:m0_awuser -> intel_niosv_m_0_instruction_manager_agent:awuser
	wire    [7:0] intel_niosv_m_0_instruction_manager_translator_m0_arlen;              // intel_niosv_m_0_instruction_manager_translator:m0_arlen -> intel_niosv_m_0_instruction_manager_agent:arlen
	wire    [3:0] intel_niosv_m_0_instruction_manager_translator_m0_arqos;              // intel_niosv_m_0_instruction_manager_translator:m0_arqos -> intel_niosv_m_0_instruction_manager_agent:arqos
	wire    [3:0] intel_niosv_m_0_instruction_manager_translator_m0_wstrb;              // intel_niosv_m_0_instruction_manager_translator:m0_wstrb -> intel_niosv_m_0_instruction_manager_agent:wstrb
	wire          intel_niosv_m_0_instruction_manager_translator_m0_wready;             // intel_niosv_m_0_instruction_manager_agent:wready -> intel_niosv_m_0_instruction_manager_translator:m0_wready
	wire    [0:0] intel_niosv_m_0_instruction_manager_translator_m0_rid;                // intel_niosv_m_0_instruction_manager_agent:rid -> intel_niosv_m_0_instruction_manager_translator:m0_rid
	wire          intel_niosv_m_0_instruction_manager_translator_m0_rready;             // intel_niosv_m_0_instruction_manager_translator:m0_rready -> intel_niosv_m_0_instruction_manager_agent:rready
	wire    [7:0] intel_niosv_m_0_instruction_manager_translator_m0_awlen;              // intel_niosv_m_0_instruction_manager_translator:m0_awlen -> intel_niosv_m_0_instruction_manager_agent:awlen
	wire    [3:0] intel_niosv_m_0_instruction_manager_translator_m0_awqos;              // intel_niosv_m_0_instruction_manager_translator:m0_awqos -> intel_niosv_m_0_instruction_manager_agent:awqos
	wire    [3:0] intel_niosv_m_0_instruction_manager_translator_m0_arcache;            // intel_niosv_m_0_instruction_manager_translator:m0_arcache -> intel_niosv_m_0_instruction_manager_agent:arcache
	wire          intel_niosv_m_0_instruction_manager_translator_m0_wvalid;             // intel_niosv_m_0_instruction_manager_translator:m0_wvalid -> intel_niosv_m_0_instruction_manager_agent:wvalid
	wire   [31:0] intel_niosv_m_0_instruction_manager_translator_m0_araddr;             // intel_niosv_m_0_instruction_manager_translator:m0_araddr -> intel_niosv_m_0_instruction_manager_agent:araddr
	wire    [2:0] intel_niosv_m_0_instruction_manager_translator_m0_arprot;             // intel_niosv_m_0_instruction_manager_translator:m0_arprot -> intel_niosv_m_0_instruction_manager_agent:arprot
	wire    [2:0] intel_niosv_m_0_instruction_manager_translator_m0_awprot;             // intel_niosv_m_0_instruction_manager_translator:m0_awprot -> intel_niosv_m_0_instruction_manager_agent:awprot
	wire   [31:0] intel_niosv_m_0_instruction_manager_translator_m0_wdata;              // intel_niosv_m_0_instruction_manager_translator:m0_wdata -> intel_niosv_m_0_instruction_manager_agent:wdata
	wire          intel_niosv_m_0_instruction_manager_translator_m0_arvalid;            // intel_niosv_m_0_instruction_manager_translator:m0_arvalid -> intel_niosv_m_0_instruction_manager_agent:arvalid
	wire    [3:0] intel_niosv_m_0_instruction_manager_translator_m0_awcache;            // intel_niosv_m_0_instruction_manager_translator:m0_awcache -> intel_niosv_m_0_instruction_manager_agent:awcache
	wire    [0:0] intel_niosv_m_0_instruction_manager_translator_m0_arid;               // intel_niosv_m_0_instruction_manager_translator:m0_arid -> intel_niosv_m_0_instruction_manager_agent:arid
	wire    [0:0] intel_niosv_m_0_instruction_manager_translator_m0_arlock;             // intel_niosv_m_0_instruction_manager_translator:m0_arlock -> intel_niosv_m_0_instruction_manager_agent:arlock
	wire    [0:0] intel_niosv_m_0_instruction_manager_translator_m0_awlock;             // intel_niosv_m_0_instruction_manager_translator:m0_awlock -> intel_niosv_m_0_instruction_manager_agent:awlock
	wire   [31:0] intel_niosv_m_0_instruction_manager_translator_m0_awaddr;             // intel_niosv_m_0_instruction_manager_translator:m0_awaddr -> intel_niosv_m_0_instruction_manager_agent:awaddr
	wire    [1:0] intel_niosv_m_0_instruction_manager_translator_m0_bresp;              // intel_niosv_m_0_instruction_manager_agent:bresp -> intel_niosv_m_0_instruction_manager_translator:m0_bresp
	wire          intel_niosv_m_0_instruction_manager_translator_m0_arready;            // intel_niosv_m_0_instruction_manager_agent:arready -> intel_niosv_m_0_instruction_manager_translator:m0_arready
	wire   [31:0] intel_niosv_m_0_instruction_manager_translator_m0_rdata;              // intel_niosv_m_0_instruction_manager_agent:rdata -> intel_niosv_m_0_instruction_manager_translator:m0_rdata
	wire          intel_niosv_m_0_instruction_manager_translator_m0_awready;            // intel_niosv_m_0_instruction_manager_agent:awready -> intel_niosv_m_0_instruction_manager_translator:m0_awready
	wire    [1:0] intel_niosv_m_0_instruction_manager_translator_m0_arburst;            // intel_niosv_m_0_instruction_manager_translator:m0_arburst -> intel_niosv_m_0_instruction_manager_agent:arburst
	wire    [2:0] intel_niosv_m_0_instruction_manager_translator_m0_arsize;             // intel_niosv_m_0_instruction_manager_translator:m0_arsize -> intel_niosv_m_0_instruction_manager_agent:arsize
	wire          intel_niosv_m_0_instruction_manager_translator_m0_bready;             // intel_niosv_m_0_instruction_manager_translator:m0_bready -> intel_niosv_m_0_instruction_manager_agent:bready
	wire          intel_niosv_m_0_instruction_manager_translator_m0_rlast;              // intel_niosv_m_0_instruction_manager_agent:rlast -> intel_niosv_m_0_instruction_manager_translator:m0_rlast
	wire          intel_niosv_m_0_instruction_manager_translator_m0_wlast;              // intel_niosv_m_0_instruction_manager_translator:m0_wlast -> intel_niosv_m_0_instruction_manager_agent:wlast
	wire    [3:0] intel_niosv_m_0_instruction_manager_translator_m0_awregion;           // intel_niosv_m_0_instruction_manager_translator:m0_awregion -> intel_niosv_m_0_instruction_manager_agent:awregion
	wire    [0:0] intel_niosv_m_0_instruction_manager_translator_m0_buser;              // intel_niosv_m_0_instruction_manager_agent:buser -> intel_niosv_m_0_instruction_manager_translator:m0_buser
	wire    [1:0] intel_niosv_m_0_instruction_manager_translator_m0_rresp;              // intel_niosv_m_0_instruction_manager_agent:rresp -> intel_niosv_m_0_instruction_manager_translator:m0_rresp
	wire    [0:0] intel_niosv_m_0_instruction_manager_translator_m0_awid;               // intel_niosv_m_0_instruction_manager_translator:m0_awid -> intel_niosv_m_0_instruction_manager_agent:awid
	wire    [0:0] intel_niosv_m_0_instruction_manager_translator_m0_bid;                // intel_niosv_m_0_instruction_manager_agent:bid -> intel_niosv_m_0_instruction_manager_translator:m0_bid
	wire          intel_niosv_m_0_instruction_manager_translator_m0_bvalid;             // intel_niosv_m_0_instruction_manager_agent:bvalid -> intel_niosv_m_0_instruction_manager_translator:m0_bvalid
	wire    [2:0] intel_niosv_m_0_instruction_manager_translator_m0_awsize;             // intel_niosv_m_0_instruction_manager_translator:m0_awsize -> intel_niosv_m_0_instruction_manager_agent:awsize
	wire          intel_niosv_m_0_instruction_manager_translator_m0_awvalid;            // intel_niosv_m_0_instruction_manager_translator:m0_awvalid -> intel_niosv_m_0_instruction_manager_agent:awvalid
	wire    [0:0] intel_niosv_m_0_instruction_manager_translator_m0_aruser;             // intel_niosv_m_0_instruction_manager_translator:m0_aruser -> intel_niosv_m_0_instruction_manager_agent:aruser
	wire          intel_niosv_m_0_instruction_manager_translator_m0_rvalid;             // intel_niosv_m_0_instruction_manager_agent:rvalid -> intel_niosv_m_0_instruction_manager_translator:m0_rvalid
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_readdata;                      // jtag_uart_0_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest;                   // jtag_uart_0_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_0_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess;                   // jtag_uart_0_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_0_avalon_jtag_slave_translator:uav_debugaccess
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_address;                       // jtag_uart_0_avalon_jtag_slave_agent:m0_address -> jtag_uart_0_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable;                    // jtag_uart_0_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_0_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_read;                          // jtag_uart_0_avalon_jtag_slave_agent:m0_read -> jtag_uart_0_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid;                 // jtag_uart_0_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_lock;                          // jtag_uart_0_avalon_jtag_slave_agent:m0_lock -> jtag_uart_0_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_writedata;                     // jtag_uart_0_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_0_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_write;                         // jtag_uart_0_avalon_jtag_slave_agent:m0_write -> jtag_uart_0_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount;                    // jtag_uart_0_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_0_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid;                  // jtag_uart_0_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [130:0] jtag_uart_0_avalon_jtag_slave_agent_rf_source_data;                   // jtag_uart_0_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready;                  // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_0_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket;          // jtag_uart_0_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket;            // jtag_uart_0_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid;               // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_valid
	wire  [130:0] jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data;                // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready;               // jtag_uart_0_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;       // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;         // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid;             // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_valid -> jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:in_valid
	wire   [33:0] jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data;              // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_data -> jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:in_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready;             // jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:in_ready -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_valid;             // jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:out_valid -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_data;              // jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:out_data -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_ready;             // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:out_ready
	wire   [31:0] intel_niosv_m_0_dm_agent_agent_m0_readdata;                           // intel_niosv_m_0_dm_agent_translator:uav_readdata -> intel_niosv_m_0_dm_agent_agent:m0_readdata
	wire          intel_niosv_m_0_dm_agent_agent_m0_waitrequest;                        // intel_niosv_m_0_dm_agent_translator:uav_waitrequest -> intel_niosv_m_0_dm_agent_agent:m0_waitrequest
	wire          intel_niosv_m_0_dm_agent_agent_m0_debugaccess;                        // intel_niosv_m_0_dm_agent_agent:m0_debugaccess -> intel_niosv_m_0_dm_agent_translator:uav_debugaccess
	wire   [31:0] intel_niosv_m_0_dm_agent_agent_m0_address;                            // intel_niosv_m_0_dm_agent_agent:m0_address -> intel_niosv_m_0_dm_agent_translator:uav_address
	wire    [3:0] intel_niosv_m_0_dm_agent_agent_m0_byteenable;                         // intel_niosv_m_0_dm_agent_agent:m0_byteenable -> intel_niosv_m_0_dm_agent_translator:uav_byteenable
	wire          intel_niosv_m_0_dm_agent_agent_m0_read;                               // intel_niosv_m_0_dm_agent_agent:m0_read -> intel_niosv_m_0_dm_agent_translator:uav_read
	wire          intel_niosv_m_0_dm_agent_agent_m0_readdatavalid;                      // intel_niosv_m_0_dm_agent_translator:uav_readdatavalid -> intel_niosv_m_0_dm_agent_agent:m0_readdatavalid
	wire          intel_niosv_m_0_dm_agent_agent_m0_lock;                               // intel_niosv_m_0_dm_agent_agent:m0_lock -> intel_niosv_m_0_dm_agent_translator:uav_lock
	wire   [31:0] intel_niosv_m_0_dm_agent_agent_m0_writedata;                          // intel_niosv_m_0_dm_agent_agent:m0_writedata -> intel_niosv_m_0_dm_agent_translator:uav_writedata
	wire          intel_niosv_m_0_dm_agent_agent_m0_write;                              // intel_niosv_m_0_dm_agent_agent:m0_write -> intel_niosv_m_0_dm_agent_translator:uav_write
	wire    [2:0] intel_niosv_m_0_dm_agent_agent_m0_burstcount;                         // intel_niosv_m_0_dm_agent_agent:m0_burstcount -> intel_niosv_m_0_dm_agent_translator:uav_burstcount
	wire          intel_niosv_m_0_dm_agent_agent_rf_source_valid;                       // intel_niosv_m_0_dm_agent_agent:rf_source_valid -> intel_niosv_m_0_dm_agent_agent_rsp_fifo:in_valid
	wire  [130:0] intel_niosv_m_0_dm_agent_agent_rf_source_data;                        // intel_niosv_m_0_dm_agent_agent:rf_source_data -> intel_niosv_m_0_dm_agent_agent_rsp_fifo:in_data
	wire          intel_niosv_m_0_dm_agent_agent_rf_source_ready;                       // intel_niosv_m_0_dm_agent_agent_rsp_fifo:in_ready -> intel_niosv_m_0_dm_agent_agent:rf_source_ready
	wire          intel_niosv_m_0_dm_agent_agent_rf_source_startofpacket;               // intel_niosv_m_0_dm_agent_agent:rf_source_startofpacket -> intel_niosv_m_0_dm_agent_agent_rsp_fifo:in_startofpacket
	wire          intel_niosv_m_0_dm_agent_agent_rf_source_endofpacket;                 // intel_niosv_m_0_dm_agent_agent:rf_source_endofpacket -> intel_niosv_m_0_dm_agent_agent_rsp_fifo:in_endofpacket
	wire          intel_niosv_m_0_dm_agent_agent_rsp_fifo_out_valid;                    // intel_niosv_m_0_dm_agent_agent_rsp_fifo:out_valid -> intel_niosv_m_0_dm_agent_agent:rf_sink_valid
	wire  [130:0] intel_niosv_m_0_dm_agent_agent_rsp_fifo_out_data;                     // intel_niosv_m_0_dm_agent_agent_rsp_fifo:out_data -> intel_niosv_m_0_dm_agent_agent:rf_sink_data
	wire          intel_niosv_m_0_dm_agent_agent_rsp_fifo_out_ready;                    // intel_niosv_m_0_dm_agent_agent:rf_sink_ready -> intel_niosv_m_0_dm_agent_agent_rsp_fifo:out_ready
	wire          intel_niosv_m_0_dm_agent_agent_rsp_fifo_out_startofpacket;            // intel_niosv_m_0_dm_agent_agent_rsp_fifo:out_startofpacket -> intel_niosv_m_0_dm_agent_agent:rf_sink_startofpacket
	wire          intel_niosv_m_0_dm_agent_agent_rsp_fifo_out_endofpacket;              // intel_niosv_m_0_dm_agent_agent_rsp_fifo:out_endofpacket -> intel_niosv_m_0_dm_agent_agent:rf_sink_endofpacket
	wire          intel_niosv_m_0_dm_agent_agent_rdata_fifo_src_valid;                  // intel_niosv_m_0_dm_agent_agent:rdata_fifo_src_valid -> intel_niosv_m_0_dm_agent_agent_rdata_fifo:in_valid
	wire   [33:0] intel_niosv_m_0_dm_agent_agent_rdata_fifo_src_data;                   // intel_niosv_m_0_dm_agent_agent:rdata_fifo_src_data -> intel_niosv_m_0_dm_agent_agent_rdata_fifo:in_data
	wire          intel_niosv_m_0_dm_agent_agent_rdata_fifo_src_ready;                  // intel_niosv_m_0_dm_agent_agent_rdata_fifo:in_ready -> intel_niosv_m_0_dm_agent_agent:rdata_fifo_src_ready
	wire          intel_niosv_m_0_dm_agent_agent_rdata_fifo_out_valid;                  // intel_niosv_m_0_dm_agent_agent_rdata_fifo:out_valid -> intel_niosv_m_0_dm_agent_agent:rdata_fifo_sink_valid
	wire   [33:0] intel_niosv_m_0_dm_agent_agent_rdata_fifo_out_data;                   // intel_niosv_m_0_dm_agent_agent_rdata_fifo:out_data -> intel_niosv_m_0_dm_agent_agent:rdata_fifo_sink_data
	wire          intel_niosv_m_0_dm_agent_agent_rdata_fifo_out_ready;                  // intel_niosv_m_0_dm_agent_agent:rdata_fifo_sink_ready -> intel_niosv_m_0_dm_agent_agent_rdata_fifo:out_ready
	wire   [31:0] onchip_memory2_0_s1_agent_m0_readdata;                                // onchip_memory2_0_s1_translator:uav_readdata -> onchip_memory2_0_s1_agent:m0_readdata
	wire          onchip_memory2_0_s1_agent_m0_waitrequest;                             // onchip_memory2_0_s1_translator:uav_waitrequest -> onchip_memory2_0_s1_agent:m0_waitrequest
	wire          onchip_memory2_0_s1_agent_m0_debugaccess;                             // onchip_memory2_0_s1_agent:m0_debugaccess -> onchip_memory2_0_s1_translator:uav_debugaccess
	wire   [31:0] onchip_memory2_0_s1_agent_m0_address;                                 // onchip_memory2_0_s1_agent:m0_address -> onchip_memory2_0_s1_translator:uav_address
	wire    [3:0] onchip_memory2_0_s1_agent_m0_byteenable;                              // onchip_memory2_0_s1_agent:m0_byteenable -> onchip_memory2_0_s1_translator:uav_byteenable
	wire          onchip_memory2_0_s1_agent_m0_read;                                    // onchip_memory2_0_s1_agent:m0_read -> onchip_memory2_0_s1_translator:uav_read
	wire          onchip_memory2_0_s1_agent_m0_readdatavalid;                           // onchip_memory2_0_s1_translator:uav_readdatavalid -> onchip_memory2_0_s1_agent:m0_readdatavalid
	wire          onchip_memory2_0_s1_agent_m0_lock;                                    // onchip_memory2_0_s1_agent:m0_lock -> onchip_memory2_0_s1_translator:uav_lock
	wire   [31:0] onchip_memory2_0_s1_agent_m0_writedata;                               // onchip_memory2_0_s1_agent:m0_writedata -> onchip_memory2_0_s1_translator:uav_writedata
	wire          onchip_memory2_0_s1_agent_m0_write;                                   // onchip_memory2_0_s1_agent:m0_write -> onchip_memory2_0_s1_translator:uav_write
	wire    [2:0] onchip_memory2_0_s1_agent_m0_burstcount;                              // onchip_memory2_0_s1_agent:m0_burstcount -> onchip_memory2_0_s1_translator:uav_burstcount
	wire          onchip_memory2_0_s1_agent_rf_source_valid;                            // onchip_memory2_0_s1_agent:rf_source_valid -> onchip_memory2_0_s1_agent_rsp_fifo:in_valid
	wire  [130:0] onchip_memory2_0_s1_agent_rf_source_data;                             // onchip_memory2_0_s1_agent:rf_source_data -> onchip_memory2_0_s1_agent_rsp_fifo:in_data
	wire          onchip_memory2_0_s1_agent_rf_source_ready;                            // onchip_memory2_0_s1_agent_rsp_fifo:in_ready -> onchip_memory2_0_s1_agent:rf_source_ready
	wire          onchip_memory2_0_s1_agent_rf_source_startofpacket;                    // onchip_memory2_0_s1_agent:rf_source_startofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_startofpacket
	wire          onchip_memory2_0_s1_agent_rf_source_endofpacket;                      // onchip_memory2_0_s1_agent:rf_source_endofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_endofpacket
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_valid;                         // onchip_memory2_0_s1_agent_rsp_fifo:out_valid -> onchip_memory2_0_s1_agent:rf_sink_valid
	wire  [130:0] onchip_memory2_0_s1_agent_rsp_fifo_out_data;                          // onchip_memory2_0_s1_agent_rsp_fifo:out_data -> onchip_memory2_0_s1_agent:rf_sink_data
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_ready;                         // onchip_memory2_0_s1_agent:rf_sink_ready -> onchip_memory2_0_s1_agent_rsp_fifo:out_ready
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket;                 // onchip_memory2_0_s1_agent_rsp_fifo:out_startofpacket -> onchip_memory2_0_s1_agent:rf_sink_startofpacket
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket;                   // onchip_memory2_0_s1_agent_rsp_fifo:out_endofpacket -> onchip_memory2_0_s1_agent:rf_sink_endofpacket
	wire          onchip_memory2_0_s1_agent_rdata_fifo_src_valid;                       // onchip_memory2_0_s1_agent:rdata_fifo_src_valid -> onchip_memory2_0_s1_agent_rdata_fifo:in_valid
	wire   [33:0] onchip_memory2_0_s1_agent_rdata_fifo_src_data;                        // onchip_memory2_0_s1_agent:rdata_fifo_src_data -> onchip_memory2_0_s1_agent_rdata_fifo:in_data
	wire          onchip_memory2_0_s1_agent_rdata_fifo_src_ready;                       // onchip_memory2_0_s1_agent_rdata_fifo:in_ready -> onchip_memory2_0_s1_agent:rdata_fifo_src_ready
	wire          onchip_memory2_0_s1_agent_rdata_fifo_out_valid;                       // onchip_memory2_0_s1_agent_rdata_fifo:out_valid -> onchip_memory2_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] onchip_memory2_0_s1_agent_rdata_fifo_out_data;                        // onchip_memory2_0_s1_agent_rdata_fifo:out_data -> onchip_memory2_0_s1_agent:rdata_fifo_sink_data
	wire          onchip_memory2_0_s1_agent_rdata_fifo_out_ready;                       // onchip_memory2_0_s1_agent:rdata_fifo_sink_ready -> onchip_memory2_0_s1_agent_rdata_fifo:out_ready
	wire   [31:0] intel_niosv_m_0_timer_sw_agent_agent_m0_readdata;                     // intel_niosv_m_0_timer_sw_agent_translator:uav_readdata -> intel_niosv_m_0_timer_sw_agent_agent:m0_readdata
	wire          intel_niosv_m_0_timer_sw_agent_agent_m0_waitrequest;                  // intel_niosv_m_0_timer_sw_agent_translator:uav_waitrequest -> intel_niosv_m_0_timer_sw_agent_agent:m0_waitrequest
	wire          intel_niosv_m_0_timer_sw_agent_agent_m0_debugaccess;                  // intel_niosv_m_0_timer_sw_agent_agent:m0_debugaccess -> intel_niosv_m_0_timer_sw_agent_translator:uav_debugaccess
	wire   [31:0] intel_niosv_m_0_timer_sw_agent_agent_m0_address;                      // intel_niosv_m_0_timer_sw_agent_agent:m0_address -> intel_niosv_m_0_timer_sw_agent_translator:uav_address
	wire    [3:0] intel_niosv_m_0_timer_sw_agent_agent_m0_byteenable;                   // intel_niosv_m_0_timer_sw_agent_agent:m0_byteenable -> intel_niosv_m_0_timer_sw_agent_translator:uav_byteenable
	wire          intel_niosv_m_0_timer_sw_agent_agent_m0_read;                         // intel_niosv_m_0_timer_sw_agent_agent:m0_read -> intel_niosv_m_0_timer_sw_agent_translator:uav_read
	wire          intel_niosv_m_0_timer_sw_agent_agent_m0_readdatavalid;                // intel_niosv_m_0_timer_sw_agent_translator:uav_readdatavalid -> intel_niosv_m_0_timer_sw_agent_agent:m0_readdatavalid
	wire          intel_niosv_m_0_timer_sw_agent_agent_m0_lock;                         // intel_niosv_m_0_timer_sw_agent_agent:m0_lock -> intel_niosv_m_0_timer_sw_agent_translator:uav_lock
	wire   [31:0] intel_niosv_m_0_timer_sw_agent_agent_m0_writedata;                    // intel_niosv_m_0_timer_sw_agent_agent:m0_writedata -> intel_niosv_m_0_timer_sw_agent_translator:uav_writedata
	wire          intel_niosv_m_0_timer_sw_agent_agent_m0_write;                        // intel_niosv_m_0_timer_sw_agent_agent:m0_write -> intel_niosv_m_0_timer_sw_agent_translator:uav_write
	wire    [2:0] intel_niosv_m_0_timer_sw_agent_agent_m0_burstcount;                   // intel_niosv_m_0_timer_sw_agent_agent:m0_burstcount -> intel_niosv_m_0_timer_sw_agent_translator:uav_burstcount
	wire          intel_niosv_m_0_timer_sw_agent_agent_rf_source_valid;                 // intel_niosv_m_0_timer_sw_agent_agent:rf_source_valid -> intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo:in_valid
	wire  [130:0] intel_niosv_m_0_timer_sw_agent_agent_rf_source_data;                  // intel_niosv_m_0_timer_sw_agent_agent:rf_source_data -> intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo:in_data
	wire          intel_niosv_m_0_timer_sw_agent_agent_rf_source_ready;                 // intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo:in_ready -> intel_niosv_m_0_timer_sw_agent_agent:rf_source_ready
	wire          intel_niosv_m_0_timer_sw_agent_agent_rf_source_startofpacket;         // intel_niosv_m_0_timer_sw_agent_agent:rf_source_startofpacket -> intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo:in_startofpacket
	wire          intel_niosv_m_0_timer_sw_agent_agent_rf_source_endofpacket;           // intel_niosv_m_0_timer_sw_agent_agent:rf_source_endofpacket -> intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo:in_endofpacket
	wire          intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo_out_valid;              // intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo:out_valid -> intel_niosv_m_0_timer_sw_agent_agent:rf_sink_valid
	wire  [130:0] intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo_out_data;               // intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo:out_data -> intel_niosv_m_0_timer_sw_agent_agent:rf_sink_data
	wire          intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo_out_ready;              // intel_niosv_m_0_timer_sw_agent_agent:rf_sink_ready -> intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo:out_ready
	wire          intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo_out_startofpacket;      // intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo:out_startofpacket -> intel_niosv_m_0_timer_sw_agent_agent:rf_sink_startofpacket
	wire          intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo_out_endofpacket;        // intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo:out_endofpacket -> intel_niosv_m_0_timer_sw_agent_agent:rf_sink_endofpacket
	wire          intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo_src_valid;            // intel_niosv_m_0_timer_sw_agent_agent:rdata_fifo_src_valid -> intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo:in_valid
	wire   [33:0] intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo_src_data;             // intel_niosv_m_0_timer_sw_agent_agent:rdata_fifo_src_data -> intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo:in_data
	wire          intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo_src_ready;            // intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo:in_ready -> intel_niosv_m_0_timer_sw_agent_agent:rdata_fifo_src_ready
	wire          intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo_out_valid;            // intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo:out_valid -> intel_niosv_m_0_timer_sw_agent_agent:rdata_fifo_sink_valid
	wire   [33:0] intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo_out_data;             // intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo:out_data -> intel_niosv_m_0_timer_sw_agent_agent:rdata_fifo_sink_data
	wire          intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo_out_ready;            // intel_niosv_m_0_timer_sw_agent_agent:rdata_fifo_sink_ready -> intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo:out_ready
	wire          intel_niosv_m_0_data_manager_agent_write_cp_valid;                    // intel_niosv_m_0_data_manager_agent:write_cp_valid -> router:sink_valid
	wire  [129:0] intel_niosv_m_0_data_manager_agent_write_cp_data;                     // intel_niosv_m_0_data_manager_agent:write_cp_data -> router:sink_data
	wire          intel_niosv_m_0_data_manager_agent_write_cp_ready;                    // router:sink_ready -> intel_niosv_m_0_data_manager_agent:write_cp_ready
	wire          intel_niosv_m_0_data_manager_agent_write_cp_startofpacket;            // intel_niosv_m_0_data_manager_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          intel_niosv_m_0_data_manager_agent_write_cp_endofpacket;              // intel_niosv_m_0_data_manager_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                     // router:src_valid -> cmd_demux:sink_valid
	wire  [129:0] router_src_data;                                                      // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                     // cmd_demux:sink_ready -> router:src_ready
	wire    [3:0] router_src_channel;                                                   // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                             // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                               // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          intel_niosv_m_0_data_manager_agent_read_cp_valid;                     // intel_niosv_m_0_data_manager_agent:read_cp_valid -> router_001:sink_valid
	wire  [129:0] intel_niosv_m_0_data_manager_agent_read_cp_data;                      // intel_niosv_m_0_data_manager_agent:read_cp_data -> router_001:sink_data
	wire          intel_niosv_m_0_data_manager_agent_read_cp_ready;                     // router_001:sink_ready -> intel_niosv_m_0_data_manager_agent:read_cp_ready
	wire          intel_niosv_m_0_data_manager_agent_read_cp_startofpacket;             // intel_niosv_m_0_data_manager_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          intel_niosv_m_0_data_manager_agent_read_cp_endofpacket;               // intel_niosv_m_0_data_manager_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                 // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [129:0] router_001_src_data;                                                  // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                 // cmd_demux_001:sink_ready -> router_001:src_ready
	wire    [3:0] router_001_src_channel;                                               // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                         // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                           // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          intel_niosv_m_0_instruction_manager_agent_write_cp_valid;             // intel_niosv_m_0_instruction_manager_agent:write_cp_valid -> router_002:sink_valid
	wire  [129:0] intel_niosv_m_0_instruction_manager_agent_write_cp_data;              // intel_niosv_m_0_instruction_manager_agent:write_cp_data -> router_002:sink_data
	wire          intel_niosv_m_0_instruction_manager_agent_write_cp_ready;             // router_002:sink_ready -> intel_niosv_m_0_instruction_manager_agent:write_cp_ready
	wire          intel_niosv_m_0_instruction_manager_agent_write_cp_startofpacket;     // intel_niosv_m_0_instruction_manager_agent:write_cp_startofpacket -> router_002:sink_startofpacket
	wire          intel_niosv_m_0_instruction_manager_agent_write_cp_endofpacket;       // intel_niosv_m_0_instruction_manager_agent:write_cp_endofpacket -> router_002:sink_endofpacket
	wire          intel_niosv_m_0_instruction_manager_agent_read_cp_valid;              // intel_niosv_m_0_instruction_manager_agent:read_cp_valid -> router_003:sink_valid
	wire  [129:0] intel_niosv_m_0_instruction_manager_agent_read_cp_data;               // intel_niosv_m_0_instruction_manager_agent:read_cp_data -> router_003:sink_data
	wire          intel_niosv_m_0_instruction_manager_agent_read_cp_ready;              // router_003:sink_ready -> intel_niosv_m_0_instruction_manager_agent:read_cp_ready
	wire          intel_niosv_m_0_instruction_manager_agent_read_cp_startofpacket;      // intel_niosv_m_0_instruction_manager_agent:read_cp_startofpacket -> router_003:sink_startofpacket
	wire          intel_niosv_m_0_instruction_manager_agent_read_cp_endofpacket;        // intel_niosv_m_0_instruction_manager_agent:read_cp_endofpacket -> router_003:sink_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_valid;                         // jtag_uart_0_avalon_jtag_slave_agent:rp_valid -> router_004:sink_valid
	wire  [129:0] jtag_uart_0_avalon_jtag_slave_agent_rp_data;                          // jtag_uart_0_avalon_jtag_slave_agent:rp_data -> router_004:sink_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_ready;                         // router_004:sink_ready -> jtag_uart_0_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket;                 // jtag_uart_0_avalon_jtag_slave_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket;                   // jtag_uart_0_avalon_jtag_slave_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                 // router_004:src_valid -> rsp_demux:sink_valid
	wire  [129:0] router_004_src_data;                                                  // router_004:src_data -> rsp_demux:sink_data
	wire          router_004_src_ready;                                                 // rsp_demux:sink_ready -> router_004:src_ready
	wire    [3:0] router_004_src_channel;                                               // router_004:src_channel -> rsp_demux:sink_channel
	wire          router_004_src_startofpacket;                                         // router_004:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_004_src_endofpacket;                                           // router_004:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          intel_niosv_m_0_dm_agent_agent_rp_valid;                              // intel_niosv_m_0_dm_agent_agent:rp_valid -> router_005:sink_valid
	wire  [129:0] intel_niosv_m_0_dm_agent_agent_rp_data;                               // intel_niosv_m_0_dm_agent_agent:rp_data -> router_005:sink_data
	wire          intel_niosv_m_0_dm_agent_agent_rp_ready;                              // router_005:sink_ready -> intel_niosv_m_0_dm_agent_agent:rp_ready
	wire          intel_niosv_m_0_dm_agent_agent_rp_startofpacket;                      // intel_niosv_m_0_dm_agent_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          intel_niosv_m_0_dm_agent_agent_rp_endofpacket;                        // intel_niosv_m_0_dm_agent_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                 // router_005:src_valid -> rsp_demux_001:sink_valid
	wire  [129:0] router_005_src_data;                                                  // router_005:src_data -> rsp_demux_001:sink_data
	wire          router_005_src_ready;                                                 // rsp_demux_001:sink_ready -> router_005:src_ready
	wire    [3:0] router_005_src_channel;                                               // router_005:src_channel -> rsp_demux_001:sink_channel
	wire          router_005_src_startofpacket;                                         // router_005:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_005_src_endofpacket;                                           // router_005:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          onchip_memory2_0_s1_agent_rp_valid;                                   // onchip_memory2_0_s1_agent:rp_valid -> router_006:sink_valid
	wire  [129:0] onchip_memory2_0_s1_agent_rp_data;                                    // onchip_memory2_0_s1_agent:rp_data -> router_006:sink_data
	wire          onchip_memory2_0_s1_agent_rp_ready;                                   // router_006:sink_ready -> onchip_memory2_0_s1_agent:rp_ready
	wire          onchip_memory2_0_s1_agent_rp_startofpacket;                           // onchip_memory2_0_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          onchip_memory2_0_s1_agent_rp_endofpacket;                             // onchip_memory2_0_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                 // router_006:src_valid -> rsp_demux_002:sink_valid
	wire  [129:0] router_006_src_data;                                                  // router_006:src_data -> rsp_demux_002:sink_data
	wire          router_006_src_ready;                                                 // rsp_demux_002:sink_ready -> router_006:src_ready
	wire    [3:0] router_006_src_channel;                                               // router_006:src_channel -> rsp_demux_002:sink_channel
	wire          router_006_src_startofpacket;                                         // router_006:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_006_src_endofpacket;                                           // router_006:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          intel_niosv_m_0_timer_sw_agent_agent_rp_valid;                        // intel_niosv_m_0_timer_sw_agent_agent:rp_valid -> router_007:sink_valid
	wire  [129:0] intel_niosv_m_0_timer_sw_agent_agent_rp_data;                         // intel_niosv_m_0_timer_sw_agent_agent:rp_data -> router_007:sink_data
	wire          intel_niosv_m_0_timer_sw_agent_agent_rp_ready;                        // router_007:sink_ready -> intel_niosv_m_0_timer_sw_agent_agent:rp_ready
	wire          intel_niosv_m_0_timer_sw_agent_agent_rp_startofpacket;                // intel_niosv_m_0_timer_sw_agent_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          intel_niosv_m_0_timer_sw_agent_agent_rp_endofpacket;                  // intel_niosv_m_0_timer_sw_agent_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                 // router_007:src_valid -> rsp_demux_003:sink_valid
	wire  [129:0] router_007_src_data;                                                  // router_007:src_data -> rsp_demux_003:sink_data
	wire          router_007_src_ready;                                                 // rsp_demux_003:sink_ready -> router_007:src_ready
	wire    [3:0] router_007_src_channel;                                               // router_007:src_channel -> rsp_demux_003:sink_channel
	wire          router_007_src_startofpacket;                                         // router_007:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_007_src_endofpacket;                                           // router_007:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          router_002_src_valid;                                                 // router_002:src_valid -> intel_niosv_m_0_instruction_manager_wr_limiter:cmd_sink_valid
	wire  [129:0] router_002_src_data;                                                  // router_002:src_data -> intel_niosv_m_0_instruction_manager_wr_limiter:cmd_sink_data
	wire          router_002_src_ready;                                                 // intel_niosv_m_0_instruction_manager_wr_limiter:cmd_sink_ready -> router_002:src_ready
	wire    [3:0] router_002_src_channel;                                               // router_002:src_channel -> intel_niosv_m_0_instruction_manager_wr_limiter:cmd_sink_channel
	wire          router_002_src_startofpacket;                                         // router_002:src_startofpacket -> intel_niosv_m_0_instruction_manager_wr_limiter:cmd_sink_startofpacket
	wire          router_002_src_endofpacket;                                           // router_002:src_endofpacket -> intel_niosv_m_0_instruction_manager_wr_limiter:cmd_sink_endofpacket
	wire  [129:0] intel_niosv_m_0_instruction_manager_wr_limiter_cmd_src_data;          // intel_niosv_m_0_instruction_manager_wr_limiter:cmd_src_data -> cmd_demux_002:sink_data
	wire          intel_niosv_m_0_instruction_manager_wr_limiter_cmd_src_ready;         // cmd_demux_002:sink_ready -> intel_niosv_m_0_instruction_manager_wr_limiter:cmd_src_ready
	wire    [3:0] intel_niosv_m_0_instruction_manager_wr_limiter_cmd_src_channel;       // intel_niosv_m_0_instruction_manager_wr_limiter:cmd_src_channel -> cmd_demux_002:sink_channel
	wire          intel_niosv_m_0_instruction_manager_wr_limiter_cmd_src_startofpacket; // intel_niosv_m_0_instruction_manager_wr_limiter:cmd_src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          intel_niosv_m_0_instruction_manager_wr_limiter_cmd_src_endofpacket;   // intel_niosv_m_0_instruction_manager_wr_limiter:cmd_src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          rsp_mux_002_src_valid;                                                // rsp_mux_002:src_valid -> intel_niosv_m_0_instruction_manager_wr_limiter:rsp_sink_valid
	wire  [129:0] rsp_mux_002_src_data;                                                 // rsp_mux_002:src_data -> intel_niosv_m_0_instruction_manager_wr_limiter:rsp_sink_data
	wire          rsp_mux_002_src_ready;                                                // intel_niosv_m_0_instruction_manager_wr_limiter:rsp_sink_ready -> rsp_mux_002:src_ready
	wire    [3:0] rsp_mux_002_src_channel;                                              // rsp_mux_002:src_channel -> intel_niosv_m_0_instruction_manager_wr_limiter:rsp_sink_channel
	wire          rsp_mux_002_src_startofpacket;                                        // rsp_mux_002:src_startofpacket -> intel_niosv_m_0_instruction_manager_wr_limiter:rsp_sink_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                          // rsp_mux_002:src_endofpacket -> intel_niosv_m_0_instruction_manager_wr_limiter:rsp_sink_endofpacket
	wire          intel_niosv_m_0_instruction_manager_wr_limiter_rsp_src_valid;         // intel_niosv_m_0_instruction_manager_wr_limiter:rsp_src_valid -> intel_niosv_m_0_instruction_manager_agent:write_rp_valid
	wire  [129:0] intel_niosv_m_0_instruction_manager_wr_limiter_rsp_src_data;          // intel_niosv_m_0_instruction_manager_wr_limiter:rsp_src_data -> intel_niosv_m_0_instruction_manager_agent:write_rp_data
	wire          intel_niosv_m_0_instruction_manager_wr_limiter_rsp_src_ready;         // intel_niosv_m_0_instruction_manager_agent:write_rp_ready -> intel_niosv_m_0_instruction_manager_wr_limiter:rsp_src_ready
	wire    [3:0] intel_niosv_m_0_instruction_manager_wr_limiter_rsp_src_channel;       // intel_niosv_m_0_instruction_manager_wr_limiter:rsp_src_channel -> intel_niosv_m_0_instruction_manager_agent:write_rp_channel
	wire          intel_niosv_m_0_instruction_manager_wr_limiter_rsp_src_startofpacket; // intel_niosv_m_0_instruction_manager_wr_limiter:rsp_src_startofpacket -> intel_niosv_m_0_instruction_manager_agent:write_rp_startofpacket
	wire          intel_niosv_m_0_instruction_manager_wr_limiter_rsp_src_endofpacket;   // intel_niosv_m_0_instruction_manager_wr_limiter:rsp_src_endofpacket -> intel_niosv_m_0_instruction_manager_agent:write_rp_endofpacket
	wire          router_003_src_valid;                                                 // router_003:src_valid -> intel_niosv_m_0_instruction_manager_rd_limiter:cmd_sink_valid
	wire  [129:0] router_003_src_data;                                                  // router_003:src_data -> intel_niosv_m_0_instruction_manager_rd_limiter:cmd_sink_data
	wire          router_003_src_ready;                                                 // intel_niosv_m_0_instruction_manager_rd_limiter:cmd_sink_ready -> router_003:src_ready
	wire    [3:0] router_003_src_channel;                                               // router_003:src_channel -> intel_niosv_m_0_instruction_manager_rd_limiter:cmd_sink_channel
	wire          router_003_src_startofpacket;                                         // router_003:src_startofpacket -> intel_niosv_m_0_instruction_manager_rd_limiter:cmd_sink_startofpacket
	wire          router_003_src_endofpacket;                                           // router_003:src_endofpacket -> intel_niosv_m_0_instruction_manager_rd_limiter:cmd_sink_endofpacket
	wire  [129:0] intel_niosv_m_0_instruction_manager_rd_limiter_cmd_src_data;          // intel_niosv_m_0_instruction_manager_rd_limiter:cmd_src_data -> cmd_demux_003:sink_data
	wire          intel_niosv_m_0_instruction_manager_rd_limiter_cmd_src_ready;         // cmd_demux_003:sink_ready -> intel_niosv_m_0_instruction_manager_rd_limiter:cmd_src_ready
	wire    [3:0] intel_niosv_m_0_instruction_manager_rd_limiter_cmd_src_channel;       // intel_niosv_m_0_instruction_manager_rd_limiter:cmd_src_channel -> cmd_demux_003:sink_channel
	wire          intel_niosv_m_0_instruction_manager_rd_limiter_cmd_src_startofpacket; // intel_niosv_m_0_instruction_manager_rd_limiter:cmd_src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          intel_niosv_m_0_instruction_manager_rd_limiter_cmd_src_endofpacket;   // intel_niosv_m_0_instruction_manager_rd_limiter:cmd_src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          rsp_mux_003_src_valid;                                                // rsp_mux_003:src_valid -> intel_niosv_m_0_instruction_manager_rd_limiter:rsp_sink_valid
	wire  [129:0] rsp_mux_003_src_data;                                                 // rsp_mux_003:src_data -> intel_niosv_m_0_instruction_manager_rd_limiter:rsp_sink_data
	wire          rsp_mux_003_src_ready;                                                // intel_niosv_m_0_instruction_manager_rd_limiter:rsp_sink_ready -> rsp_mux_003:src_ready
	wire    [3:0] rsp_mux_003_src_channel;                                              // rsp_mux_003:src_channel -> intel_niosv_m_0_instruction_manager_rd_limiter:rsp_sink_channel
	wire          rsp_mux_003_src_startofpacket;                                        // rsp_mux_003:src_startofpacket -> intel_niosv_m_0_instruction_manager_rd_limiter:rsp_sink_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                          // rsp_mux_003:src_endofpacket -> intel_niosv_m_0_instruction_manager_rd_limiter:rsp_sink_endofpacket
	wire          intel_niosv_m_0_instruction_manager_rd_limiter_rsp_src_valid;         // intel_niosv_m_0_instruction_manager_rd_limiter:rsp_src_valid -> intel_niosv_m_0_instruction_manager_agent:read_rp_valid
	wire  [129:0] intel_niosv_m_0_instruction_manager_rd_limiter_rsp_src_data;          // intel_niosv_m_0_instruction_manager_rd_limiter:rsp_src_data -> intel_niosv_m_0_instruction_manager_agent:read_rp_data
	wire          intel_niosv_m_0_instruction_manager_rd_limiter_rsp_src_ready;         // intel_niosv_m_0_instruction_manager_agent:read_rp_ready -> intel_niosv_m_0_instruction_manager_rd_limiter:rsp_src_ready
	wire    [3:0] intel_niosv_m_0_instruction_manager_rd_limiter_rsp_src_channel;       // intel_niosv_m_0_instruction_manager_rd_limiter:rsp_src_channel -> intel_niosv_m_0_instruction_manager_agent:read_rp_channel
	wire          intel_niosv_m_0_instruction_manager_rd_limiter_rsp_src_startofpacket; // intel_niosv_m_0_instruction_manager_rd_limiter:rsp_src_startofpacket -> intel_niosv_m_0_instruction_manager_agent:read_rp_startofpacket
	wire          intel_niosv_m_0_instruction_manager_rd_limiter_rsp_src_endofpacket;   // intel_niosv_m_0_instruction_manager_rd_limiter:rsp_src_endofpacket -> intel_niosv_m_0_instruction_manager_agent:read_rp_endofpacket
	wire          cmd_mux_src_valid;                                                    // cmd_mux:src_valid -> jtag_uart_0_avalon_jtag_slave_burst_adapter:sink0_valid
	wire  [129:0] cmd_mux_src_data;                                                     // cmd_mux:src_data -> jtag_uart_0_avalon_jtag_slave_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                    // jtag_uart_0_avalon_jtag_slave_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire    [3:0] cmd_mux_src_channel;                                                  // cmd_mux:src_channel -> jtag_uart_0_avalon_jtag_slave_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                            // cmd_mux:src_startofpacket -> jtag_uart_0_avalon_jtag_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                              // cmd_mux:src_endofpacket -> jtag_uart_0_avalon_jtag_slave_burst_adapter:sink0_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_valid;            // jtag_uart_0_avalon_jtag_slave_burst_adapter:source0_valid -> jtag_uart_0_avalon_jtag_slave_agent:cp_valid
	wire  [129:0] jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_data;             // jtag_uart_0_avalon_jtag_slave_burst_adapter:source0_data -> jtag_uart_0_avalon_jtag_slave_agent:cp_data
	wire          jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_ready;            // jtag_uart_0_avalon_jtag_slave_agent:cp_ready -> jtag_uart_0_avalon_jtag_slave_burst_adapter:source0_ready
	wire    [3:0] jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_channel;          // jtag_uart_0_avalon_jtag_slave_burst_adapter:source0_channel -> jtag_uart_0_avalon_jtag_slave_agent:cp_channel
	wire          jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_startofpacket;    // jtag_uart_0_avalon_jtag_slave_burst_adapter:source0_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_endofpacket;      // jtag_uart_0_avalon_jtag_slave_burst_adapter:source0_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_endofpacket
	wire          cmd_mux_001_src_valid;                                                // cmd_mux_001:src_valid -> intel_niosv_m_0_dm_agent_burst_adapter:sink0_valid
	wire  [129:0] cmd_mux_001_src_data;                                                 // cmd_mux_001:src_data -> intel_niosv_m_0_dm_agent_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                                // intel_niosv_m_0_dm_agent_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire    [3:0] cmd_mux_001_src_channel;                                              // cmd_mux_001:src_channel -> intel_niosv_m_0_dm_agent_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                                        // cmd_mux_001:src_startofpacket -> intel_niosv_m_0_dm_agent_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                          // cmd_mux_001:src_endofpacket -> intel_niosv_m_0_dm_agent_burst_adapter:sink0_endofpacket
	wire          intel_niosv_m_0_dm_agent_burst_adapter_source0_valid;                 // intel_niosv_m_0_dm_agent_burst_adapter:source0_valid -> intel_niosv_m_0_dm_agent_agent:cp_valid
	wire  [129:0] intel_niosv_m_0_dm_agent_burst_adapter_source0_data;                  // intel_niosv_m_0_dm_agent_burst_adapter:source0_data -> intel_niosv_m_0_dm_agent_agent:cp_data
	wire          intel_niosv_m_0_dm_agent_burst_adapter_source0_ready;                 // intel_niosv_m_0_dm_agent_agent:cp_ready -> intel_niosv_m_0_dm_agent_burst_adapter:source0_ready
	wire    [3:0] intel_niosv_m_0_dm_agent_burst_adapter_source0_channel;               // intel_niosv_m_0_dm_agent_burst_adapter:source0_channel -> intel_niosv_m_0_dm_agent_agent:cp_channel
	wire          intel_niosv_m_0_dm_agent_burst_adapter_source0_startofpacket;         // intel_niosv_m_0_dm_agent_burst_adapter:source0_startofpacket -> intel_niosv_m_0_dm_agent_agent:cp_startofpacket
	wire          intel_niosv_m_0_dm_agent_burst_adapter_source0_endofpacket;           // intel_niosv_m_0_dm_agent_burst_adapter:source0_endofpacket -> intel_niosv_m_0_dm_agent_agent:cp_endofpacket
	wire          cmd_mux_002_src_valid;                                                // cmd_mux_002:src_valid -> onchip_memory2_0_s1_burst_adapter:sink0_valid
	wire  [129:0] cmd_mux_002_src_data;                                                 // cmd_mux_002:src_data -> onchip_memory2_0_s1_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                                // onchip_memory2_0_s1_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire    [3:0] cmd_mux_002_src_channel;                                              // cmd_mux_002:src_channel -> onchip_memory2_0_s1_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                                        // cmd_mux_002:src_startofpacket -> onchip_memory2_0_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                          // cmd_mux_002:src_endofpacket -> onchip_memory2_0_s1_burst_adapter:sink0_endofpacket
	wire          onchip_memory2_0_s1_burst_adapter_source0_valid;                      // onchip_memory2_0_s1_burst_adapter:source0_valid -> onchip_memory2_0_s1_agent:cp_valid
	wire  [129:0] onchip_memory2_0_s1_burst_adapter_source0_data;                       // onchip_memory2_0_s1_burst_adapter:source0_data -> onchip_memory2_0_s1_agent:cp_data
	wire          onchip_memory2_0_s1_burst_adapter_source0_ready;                      // onchip_memory2_0_s1_agent:cp_ready -> onchip_memory2_0_s1_burst_adapter:source0_ready
	wire    [3:0] onchip_memory2_0_s1_burst_adapter_source0_channel;                    // onchip_memory2_0_s1_burst_adapter:source0_channel -> onchip_memory2_0_s1_agent:cp_channel
	wire          onchip_memory2_0_s1_burst_adapter_source0_startofpacket;              // onchip_memory2_0_s1_burst_adapter:source0_startofpacket -> onchip_memory2_0_s1_agent:cp_startofpacket
	wire          onchip_memory2_0_s1_burst_adapter_source0_endofpacket;                // onchip_memory2_0_s1_burst_adapter:source0_endofpacket -> onchip_memory2_0_s1_agent:cp_endofpacket
	wire          cmd_mux_003_src_valid;                                                // cmd_mux_003:src_valid -> intel_niosv_m_0_timer_sw_agent_burst_adapter:sink0_valid
	wire  [129:0] cmd_mux_003_src_data;                                                 // cmd_mux_003:src_data -> intel_niosv_m_0_timer_sw_agent_burst_adapter:sink0_data
	wire          cmd_mux_003_src_ready;                                                // intel_niosv_m_0_timer_sw_agent_burst_adapter:sink0_ready -> cmd_mux_003:src_ready
	wire    [3:0] cmd_mux_003_src_channel;                                              // cmd_mux_003:src_channel -> intel_niosv_m_0_timer_sw_agent_burst_adapter:sink0_channel
	wire          cmd_mux_003_src_startofpacket;                                        // cmd_mux_003:src_startofpacket -> intel_niosv_m_0_timer_sw_agent_burst_adapter:sink0_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                          // cmd_mux_003:src_endofpacket -> intel_niosv_m_0_timer_sw_agent_burst_adapter:sink0_endofpacket
	wire          intel_niosv_m_0_timer_sw_agent_burst_adapter_source0_valid;           // intel_niosv_m_0_timer_sw_agent_burst_adapter:source0_valid -> intel_niosv_m_0_timer_sw_agent_agent:cp_valid
	wire  [129:0] intel_niosv_m_0_timer_sw_agent_burst_adapter_source0_data;            // intel_niosv_m_0_timer_sw_agent_burst_adapter:source0_data -> intel_niosv_m_0_timer_sw_agent_agent:cp_data
	wire          intel_niosv_m_0_timer_sw_agent_burst_adapter_source0_ready;           // intel_niosv_m_0_timer_sw_agent_agent:cp_ready -> intel_niosv_m_0_timer_sw_agent_burst_adapter:source0_ready
	wire    [3:0] intel_niosv_m_0_timer_sw_agent_burst_adapter_source0_channel;         // intel_niosv_m_0_timer_sw_agent_burst_adapter:source0_channel -> intel_niosv_m_0_timer_sw_agent_agent:cp_channel
	wire          intel_niosv_m_0_timer_sw_agent_burst_adapter_source0_startofpacket;   // intel_niosv_m_0_timer_sw_agent_burst_adapter:source0_startofpacket -> intel_niosv_m_0_timer_sw_agent_agent:cp_startofpacket
	wire          intel_niosv_m_0_timer_sw_agent_burst_adapter_source0_endofpacket;     // intel_niosv_m_0_timer_sw_agent_burst_adapter:source0_endofpacket -> intel_niosv_m_0_timer_sw_agent_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                 // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [129:0] cmd_demux_src0_data;                                                  // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                 // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [3:0] cmd_demux_src0_channel;                                               // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                         // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                           // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                 // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [129:0] cmd_demux_src1_data;                                                  // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                 // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [3:0] cmd_demux_src1_channel;                                               // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                         // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                           // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                 // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [129:0] cmd_demux_src2_data;                                                  // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                 // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire    [3:0] cmd_demux_src2_channel;                                               // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                         // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                           // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                 // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [129:0] cmd_demux_src3_data;                                                  // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                 // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire    [3:0] cmd_demux_src3_channel;                                               // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                         // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                           // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                             // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [129:0] cmd_demux_001_src0_data;                                              // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                             // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire    [3:0] cmd_demux_001_src0_channel;                                           // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                     // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                       // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                             // cmd_demux_001:src1_valid -> cmd_mux_001:sink1_valid
	wire  [129:0] cmd_demux_001_src1_data;                                              // cmd_demux_001:src1_data -> cmd_mux_001:sink1_data
	wire          cmd_demux_001_src1_ready;                                             // cmd_mux_001:sink1_ready -> cmd_demux_001:src1_ready
	wire    [3:0] cmd_demux_001_src1_channel;                                           // cmd_demux_001:src1_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                     // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                       // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                             // cmd_demux_001:src2_valid -> cmd_mux_002:sink1_valid
	wire  [129:0] cmd_demux_001_src2_data;                                              // cmd_demux_001:src2_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_001_src2_ready;                                             // cmd_mux_002:sink1_ready -> cmd_demux_001:src2_ready
	wire    [3:0] cmd_demux_001_src2_channel;                                           // cmd_demux_001:src2_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                     // cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                       // cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                             // cmd_demux_001:src3_valid -> cmd_mux_003:sink1_valid
	wire  [129:0] cmd_demux_001_src3_data;                                              // cmd_demux_001:src3_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_001_src3_ready;                                             // cmd_mux_003:sink1_ready -> cmd_demux_001:src3_ready
	wire    [3:0] cmd_demux_001_src3_channel;                                           // cmd_demux_001:src3_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_001_src3_startofpacket;                                     // cmd_demux_001:src3_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                       // cmd_demux_001:src3_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                             // cmd_demux_002:src0_valid -> cmd_mux_001:sink2_valid
	wire  [129:0] cmd_demux_002_src0_data;                                              // cmd_demux_002:src0_data -> cmd_mux_001:sink2_data
	wire          cmd_demux_002_src0_ready;                                             // cmd_mux_001:sink2_ready -> cmd_demux_002:src0_ready
	wire    [3:0] cmd_demux_002_src0_channel;                                           // cmd_demux_002:src0_channel -> cmd_mux_001:sink2_channel
	wire          cmd_demux_002_src0_startofpacket;                                     // cmd_demux_002:src0_startofpacket -> cmd_mux_001:sink2_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                       // cmd_demux_002:src0_endofpacket -> cmd_mux_001:sink2_endofpacket
	wire          cmd_demux_002_src1_valid;                                             // cmd_demux_002:src1_valid -> cmd_mux_002:sink2_valid
	wire  [129:0] cmd_demux_002_src1_data;                                              // cmd_demux_002:src1_data -> cmd_mux_002:sink2_data
	wire          cmd_demux_002_src1_ready;                                             // cmd_mux_002:sink2_ready -> cmd_demux_002:src1_ready
	wire    [3:0] cmd_demux_002_src1_channel;                                           // cmd_demux_002:src1_channel -> cmd_mux_002:sink2_channel
	wire          cmd_demux_002_src1_startofpacket;                                     // cmd_demux_002:src1_startofpacket -> cmd_mux_002:sink2_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                       // cmd_demux_002:src1_endofpacket -> cmd_mux_002:sink2_endofpacket
	wire          cmd_demux_003_src0_valid;                                             // cmd_demux_003:src0_valid -> cmd_mux_001:sink3_valid
	wire  [129:0] cmd_demux_003_src0_data;                                              // cmd_demux_003:src0_data -> cmd_mux_001:sink3_data
	wire          cmd_demux_003_src0_ready;                                             // cmd_mux_001:sink3_ready -> cmd_demux_003:src0_ready
	wire    [3:0] cmd_demux_003_src0_channel;                                           // cmd_demux_003:src0_channel -> cmd_mux_001:sink3_channel
	wire          cmd_demux_003_src0_startofpacket;                                     // cmd_demux_003:src0_startofpacket -> cmd_mux_001:sink3_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                       // cmd_demux_003:src0_endofpacket -> cmd_mux_001:sink3_endofpacket
	wire          cmd_demux_003_src1_valid;                                             // cmd_demux_003:src1_valid -> cmd_mux_002:sink3_valid
	wire  [129:0] cmd_demux_003_src1_data;                                              // cmd_demux_003:src1_data -> cmd_mux_002:sink3_data
	wire          cmd_demux_003_src1_ready;                                             // cmd_mux_002:sink3_ready -> cmd_demux_003:src1_ready
	wire    [3:0] cmd_demux_003_src1_channel;                                           // cmd_demux_003:src1_channel -> cmd_mux_002:sink3_channel
	wire          cmd_demux_003_src1_startofpacket;                                     // cmd_demux_003:src1_startofpacket -> cmd_mux_002:sink3_startofpacket
	wire          cmd_demux_003_src1_endofpacket;                                       // cmd_demux_003:src1_endofpacket -> cmd_mux_002:sink3_endofpacket
	wire          rsp_demux_src0_valid;                                                 // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [129:0] rsp_demux_src0_data;                                                  // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                 // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [3:0] rsp_demux_src0_channel;                                               // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                         // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                           // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                 // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [129:0] rsp_demux_src1_data;                                                  // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                                 // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire    [3:0] rsp_demux_src1_channel;                                               // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                         // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                           // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                             // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [129:0] rsp_demux_001_src0_data;                                              // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                             // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [3:0] rsp_demux_001_src0_channel;                                           // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                     // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                       // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                             // rsp_demux_001:src1_valid -> rsp_mux_001:sink1_valid
	wire  [129:0] rsp_demux_001_src1_data;                                              // rsp_demux_001:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_001_src1_ready;                                             // rsp_mux_001:sink1_ready -> rsp_demux_001:src1_ready
	wire    [3:0] rsp_demux_001_src1_channel;                                           // rsp_demux_001:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_001_src1_startofpacket;                                     // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                       // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_001_src2_valid;                                             // rsp_demux_001:src2_valid -> rsp_mux_002:sink0_valid
	wire  [129:0] rsp_demux_001_src2_data;                                              // rsp_demux_001:src2_data -> rsp_mux_002:sink0_data
	wire          rsp_demux_001_src2_ready;                                             // rsp_mux_002:sink0_ready -> rsp_demux_001:src2_ready
	wire    [3:0] rsp_demux_001_src2_channel;                                           // rsp_demux_001:src2_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_001_src2_startofpacket;                                     // rsp_demux_001:src2_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          rsp_demux_001_src2_endofpacket;                                       // rsp_demux_001:src2_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_001_src3_valid;                                             // rsp_demux_001:src3_valid -> rsp_mux_003:sink0_valid
	wire  [129:0] rsp_demux_001_src3_data;                                              // rsp_demux_001:src3_data -> rsp_mux_003:sink0_data
	wire          rsp_demux_001_src3_ready;                                             // rsp_mux_003:sink0_ready -> rsp_demux_001:src3_ready
	wire    [3:0] rsp_demux_001_src3_channel;                                           // rsp_demux_001:src3_channel -> rsp_mux_003:sink0_channel
	wire          rsp_demux_001_src3_startofpacket;                                     // rsp_demux_001:src3_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          rsp_demux_001_src3_endofpacket;                                       // rsp_demux_001:src3_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_002_src0_valid;                                             // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [129:0] rsp_demux_002_src0_data;                                              // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                             // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire    [3:0] rsp_demux_002_src0_channel;                                           // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                     // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                       // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                             // rsp_demux_002:src1_valid -> rsp_mux_001:sink2_valid
	wire  [129:0] rsp_demux_002_src1_data;                                              // rsp_demux_002:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_002_src1_ready;                                             // rsp_mux_001:sink2_ready -> rsp_demux_002:src1_ready
	wire    [3:0] rsp_demux_002_src1_channel;                                           // rsp_demux_002:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_002_src1_startofpacket;                                     // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                       // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_002_src2_valid;                                             // rsp_demux_002:src2_valid -> rsp_mux_002:sink1_valid
	wire  [129:0] rsp_demux_002_src2_data;                                              // rsp_demux_002:src2_data -> rsp_mux_002:sink1_data
	wire          rsp_demux_002_src2_ready;                                             // rsp_mux_002:sink1_ready -> rsp_demux_002:src2_ready
	wire    [3:0] rsp_demux_002_src2_channel;                                           // rsp_demux_002:src2_channel -> rsp_mux_002:sink1_channel
	wire          rsp_demux_002_src2_startofpacket;                                     // rsp_demux_002:src2_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          rsp_demux_002_src2_endofpacket;                                       // rsp_demux_002:src2_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire          rsp_demux_002_src3_valid;                                             // rsp_demux_002:src3_valid -> rsp_mux_003:sink1_valid
	wire  [129:0] rsp_demux_002_src3_data;                                              // rsp_demux_002:src3_data -> rsp_mux_003:sink1_data
	wire          rsp_demux_002_src3_ready;                                             // rsp_mux_003:sink1_ready -> rsp_demux_002:src3_ready
	wire    [3:0] rsp_demux_002_src3_channel;                                           // rsp_demux_002:src3_channel -> rsp_mux_003:sink1_channel
	wire          rsp_demux_002_src3_startofpacket;                                     // rsp_demux_002:src3_startofpacket -> rsp_mux_003:sink1_startofpacket
	wire          rsp_demux_002_src3_endofpacket;                                       // rsp_demux_002:src3_endofpacket -> rsp_mux_003:sink1_endofpacket
	wire          rsp_demux_003_src0_valid;                                             // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [129:0] rsp_demux_003_src0_data;                                              // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                             // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire    [3:0] rsp_demux_003_src0_channel;                                           // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                     // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                       // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                             // rsp_demux_003:src1_valid -> rsp_mux_001:sink3_valid
	wire  [129:0] rsp_demux_003_src1_data;                                              // rsp_demux_003:src1_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_003_src1_ready;                                             // rsp_mux_001:sink3_ready -> rsp_demux_003:src1_ready
	wire    [3:0] rsp_demux_003_src1_channel;                                           // rsp_demux_003:src1_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_003_src1_startofpacket;                                     // rsp_demux_003:src1_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                       // rsp_demux_003:src1_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire    [3:0] intel_niosv_m_0_instruction_manager_wr_limiter_cmd_valid_data;        // intel_niosv_m_0_instruction_manager_wr_limiter:cmd_src_valid -> cmd_demux_002:sink_valid
	wire    [3:0] intel_niosv_m_0_instruction_manager_rd_limiter_cmd_valid_data;        // intel_niosv_m_0_instruction_manager_rd_limiter:cmd_src_valid -> cmd_demux_003:sink_valid

	Demo1_altera_merlin_axi_translator_1920_hvn5ezy #(
		.USE_S0_AWID                       (0),
		.USE_S0_AWREGION                   (0),
		.USE_M0_AWREGION                   (1),
		.USE_S0_AWLEN                      (0),
		.USE_S0_AWSIZE                     (1),
		.USE_S0_AWBURST                    (0),
		.USE_S0_AWLOCK                     (0),
		.USE_M0_AWLOCK                     (1),
		.USE_S0_AWCACHE                    (0),
		.USE_M0_AWCACHE                    (1),
		.USE_M0_AWPROT                     (1),
		.USE_S0_AWQOS                      (0),
		.USE_M0_AWQOS                      (1),
		.USE_S0_WSTRB                      (1),
		.USE_M0_WLAST                      (1),
		.USE_S0_BID                        (0),
		.USE_S0_BRESP                      (1),
		.USE_M0_BRESP                      (1),
		.USE_S0_ARID                       (0),
		.USE_S0_ARREGION                   (0),
		.USE_M0_ARREGION                   (1),
		.USE_S0_ARLEN                      (0),
		.USE_S0_ARSIZE                     (1),
		.USE_S0_ARBURST                    (0),
		.USE_S0_ARLOCK                     (0),
		.USE_M0_ARLOCK                     (1),
		.USE_M0_ARCACHE                    (1),
		.USE_M0_ARQOS                      (1),
		.USE_M0_ARPROT                     (1),
		.USE_S0_ARCACHE                    (0),
		.USE_S0_ARQOS                      (0),
		.USE_S0_RID                        (0),
		.USE_S0_RRESP                      (1),
		.USE_M0_RRESP                      (1),
		.USE_S0_RLAST                      (0),
		.M0_ID_WIDTH                       (1),
		.DATA_WIDTH                        (32),
		.S0_ID_WIDTH                       (1),
		.M0_ADDR_WIDTH                     (32),
		.S0_WRITE_ADDR_USER_WIDTH          (1),
		.S0_READ_ADDR_USER_WIDTH           (1),
		.M0_WRITE_ADDR_USER_WIDTH          (1),
		.M0_READ_ADDR_USER_WIDTH           (1),
		.S0_WRITE_DATA_USER_WIDTH          (1),
		.S0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.S0_READ_DATA_USER_WIDTH           (1),
		.M0_WRITE_DATA_USER_WIDTH          (1),
		.M0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.M0_READ_DATA_USER_WIDTH           (1),
		.S0_ADDR_WIDTH                     (32),
		.USE_S0_AWUSER                     (0),
		.USE_S0_ARUSER                     (0),
		.USE_S0_WUSER                      (0),
		.USE_S0_RUSER                      (0),
		.USE_S0_BUSER                      (0),
		.USE_M0_AWUSER                     (1),
		.USE_M0_ARUSER                     (1),
		.USE_M0_WUSER                      (1),
		.USE_M0_RUSER                      (1),
		.USE_M0_BUSER                      (1),
		.M0_AXI_VERSION                    ("AXI4"),
		.M0_BURST_LENGTH_WIDTH             (8),
		.S0_BURST_LENGTH_WIDTH             (8),
		.M0_LOCK_WIDTH                     (1),
		.S0_LOCK_WIDTH                     (1),
		.S0_AXI_VERSION                    ("AXI4"),
		.ACE_LITE_SUPPORT                  (0)
	) intel_niosv_m_0_data_manager_translator (
		.aclk        (clock_in_out_clk_clk),                                //   input,   width = 1,       clk.clk
		.aresetn     (~intel_niosv_m_0_reset_reset_bridge_in_reset_reset),  //   input,   width = 1, clk_reset.reset_n
		.m0_awid     (intel_niosv_m_0_data_manager_translator_m0_awid),     //  output,   width = 1,        m0.awid
		.m0_awaddr   (intel_niosv_m_0_data_manager_translator_m0_awaddr),   //  output,  width = 32,          .awaddr
		.m0_awlen    (intel_niosv_m_0_data_manager_translator_m0_awlen),    //  output,   width = 8,          .awlen
		.m0_awsize   (intel_niosv_m_0_data_manager_translator_m0_awsize),   //  output,   width = 3,          .awsize
		.m0_awburst  (intel_niosv_m_0_data_manager_translator_m0_awburst),  //  output,   width = 2,          .awburst
		.m0_awlock   (intel_niosv_m_0_data_manager_translator_m0_awlock),   //  output,   width = 1,          .awlock
		.m0_awcache  (intel_niosv_m_0_data_manager_translator_m0_awcache),  //  output,   width = 4,          .awcache
		.m0_awprot   (intel_niosv_m_0_data_manager_translator_m0_awprot),   //  output,   width = 3,          .awprot
		.m0_awuser   (intel_niosv_m_0_data_manager_translator_m0_awuser),   //  output,   width = 1,          .awuser
		.m0_awqos    (intel_niosv_m_0_data_manager_translator_m0_awqos),    //  output,   width = 4,          .awqos
		.m0_awregion (intel_niosv_m_0_data_manager_translator_m0_awregion), //  output,   width = 4,          .awregion
		.m0_awvalid  (intel_niosv_m_0_data_manager_translator_m0_awvalid),  //  output,   width = 1,          .awvalid
		.m0_awready  (intel_niosv_m_0_data_manager_translator_m0_awready),  //   input,   width = 1,          .awready
		.m0_wdata    (intel_niosv_m_0_data_manager_translator_m0_wdata),    //  output,  width = 32,          .wdata
		.m0_wstrb    (intel_niosv_m_0_data_manager_translator_m0_wstrb),    //  output,   width = 4,          .wstrb
		.m0_wlast    (intel_niosv_m_0_data_manager_translator_m0_wlast),    //  output,   width = 1,          .wlast
		.m0_wvalid   (intel_niosv_m_0_data_manager_translator_m0_wvalid),   //  output,   width = 1,          .wvalid
		.m0_wuser    (intel_niosv_m_0_data_manager_translator_m0_wuser),    //  output,   width = 1,          .wuser
		.m0_wready   (intel_niosv_m_0_data_manager_translator_m0_wready),   //   input,   width = 1,          .wready
		.m0_bid      (intel_niosv_m_0_data_manager_translator_m0_bid),      //   input,   width = 1,          .bid
		.m0_bresp    (intel_niosv_m_0_data_manager_translator_m0_bresp),    //   input,   width = 2,          .bresp
		.m0_buser    (intel_niosv_m_0_data_manager_translator_m0_buser),    //   input,   width = 1,          .buser
		.m0_bvalid   (intel_niosv_m_0_data_manager_translator_m0_bvalid),   //   input,   width = 1,          .bvalid
		.m0_bready   (intel_niosv_m_0_data_manager_translator_m0_bready),   //  output,   width = 1,          .bready
		.m0_arid     (intel_niosv_m_0_data_manager_translator_m0_arid),     //  output,   width = 1,          .arid
		.m0_araddr   (intel_niosv_m_0_data_manager_translator_m0_araddr),   //  output,  width = 32,          .araddr
		.m0_arlen    (intel_niosv_m_0_data_manager_translator_m0_arlen),    //  output,   width = 8,          .arlen
		.m0_arsize   (intel_niosv_m_0_data_manager_translator_m0_arsize),   //  output,   width = 3,          .arsize
		.m0_arburst  (intel_niosv_m_0_data_manager_translator_m0_arburst),  //  output,   width = 2,          .arburst
		.m0_arlock   (intel_niosv_m_0_data_manager_translator_m0_arlock),   //  output,   width = 1,          .arlock
		.m0_arcache  (intel_niosv_m_0_data_manager_translator_m0_arcache),  //  output,   width = 4,          .arcache
		.m0_arprot   (intel_niosv_m_0_data_manager_translator_m0_arprot),   //  output,   width = 3,          .arprot
		.m0_aruser   (intel_niosv_m_0_data_manager_translator_m0_aruser),   //  output,   width = 1,          .aruser
		.m0_arqos    (intel_niosv_m_0_data_manager_translator_m0_arqos),    //  output,   width = 4,          .arqos
		.m0_arregion (intel_niosv_m_0_data_manager_translator_m0_arregion), //  output,   width = 4,          .arregion
		.m0_arvalid  (intel_niosv_m_0_data_manager_translator_m0_arvalid),  //  output,   width = 1,          .arvalid
		.m0_arready  (intel_niosv_m_0_data_manager_translator_m0_arready),  //   input,   width = 1,          .arready
		.m0_rid      (intel_niosv_m_0_data_manager_translator_m0_rid),      //   input,   width = 1,          .rid
		.m0_rdata    (intel_niosv_m_0_data_manager_translator_m0_rdata),    //   input,  width = 32,          .rdata
		.m0_rresp    (intel_niosv_m_0_data_manager_translator_m0_rresp),    //   input,   width = 2,          .rresp
		.m0_rlast    (intel_niosv_m_0_data_manager_translator_m0_rlast),    //   input,   width = 1,          .rlast
		.m0_rvalid   (intel_niosv_m_0_data_manager_translator_m0_rvalid),   //   input,   width = 1,          .rvalid
		.m0_rready   (intel_niosv_m_0_data_manager_translator_m0_rready),   //  output,   width = 1,          .rready
		.m0_ruser    (intel_niosv_m_0_data_manager_translator_m0_ruser),    //   input,   width = 1,          .ruser
		.s0_awaddr   (intel_niosv_m_0_data_manager_awaddr),                 //   input,  width = 32,        s0.awaddr
		.s0_awsize   (intel_niosv_m_0_data_manager_awsize),                 //   input,   width = 3,          .awsize
		.s0_awprot   (intel_niosv_m_0_data_manager_awprot),                 //   input,   width = 3,          .awprot
		.s0_awvalid  (intel_niosv_m_0_data_manager_awvalid),                //   input,   width = 1,          .awvalid
		.s0_awready  (intel_niosv_m_0_data_manager_awready),                //  output,   width = 1,          .awready
		.s0_wdata    (intel_niosv_m_0_data_manager_wdata),                  //   input,  width = 32,          .wdata
		.s0_wstrb    (intel_niosv_m_0_data_manager_wstrb),                  //   input,   width = 4,          .wstrb
		.s0_wlast    (intel_niosv_m_0_data_manager_wlast),                  //   input,   width = 1,          .wlast
		.s0_wvalid   (intel_niosv_m_0_data_manager_wvalid),                 //   input,   width = 1,          .wvalid
		.s0_wready   (intel_niosv_m_0_data_manager_wready),                 //  output,   width = 1,          .wready
		.s0_bresp    (intel_niosv_m_0_data_manager_bresp),                  //  output,   width = 2,          .bresp
		.s0_bvalid   (intel_niosv_m_0_data_manager_bvalid),                 //  output,   width = 1,          .bvalid
		.s0_bready   (intel_niosv_m_0_data_manager_bready),                 //   input,   width = 1,          .bready
		.s0_araddr   (intel_niosv_m_0_data_manager_araddr),                 //   input,  width = 32,          .araddr
		.s0_arsize   (intel_niosv_m_0_data_manager_arsize),                 //   input,   width = 3,          .arsize
		.s0_arprot   (intel_niosv_m_0_data_manager_arprot),                 //   input,   width = 3,          .arprot
		.s0_arvalid  (intel_niosv_m_0_data_manager_arvalid),                //   input,   width = 1,          .arvalid
		.s0_arready  (intel_niosv_m_0_data_manager_arready),                //  output,   width = 1,          .arready
		.s0_rdata    (intel_niosv_m_0_data_manager_rdata),                  //  output,  width = 32,          .rdata
		.s0_rresp    (intel_niosv_m_0_data_manager_rresp),                  //  output,   width = 2,          .rresp
		.s0_rvalid   (intel_niosv_m_0_data_manager_rvalid),                 //  output,   width = 1,          .rvalid
		.s0_rready   (intel_niosv_m_0_data_manager_rready),                 //   input,   width = 1,          .rready
		.s0_awid     (1'b0),                                                // (terminated),                        
		.s0_awlen    (8'b00000000),                                         // (terminated),                        
		.s0_awburst  (2'b00),                                               // (terminated),                        
		.s0_awlock   (1'b0),                                                // (terminated),                        
		.s0_awcache  (4'b0000),                                             // (terminated),                        
		.s0_awuser   (1'b0),                                                // (terminated),                        
		.s0_awqos    (4'b0000),                                             // (terminated),                        
		.s0_awregion (4'b0000),                                             // (terminated),                        
		.s0_wuser    (1'b0),                                                // (terminated),                        
		.s0_bid      (),                                                    // (terminated),                        
		.s0_buser    (),                                                    // (terminated),                        
		.s0_arid     (1'b0),                                                // (terminated),                        
		.s0_arlen    (8'b00000000),                                         // (terminated),                        
		.s0_arburst  (2'b00),                                               // (terminated),                        
		.s0_arlock   (1'b0),                                                // (terminated),                        
		.s0_arcache  (4'b0000),                                             // (terminated),                        
		.s0_aruser   (1'b0),                                                // (terminated),                        
		.s0_arqos    (4'b0000),                                             // (terminated),                        
		.s0_arregion (4'b0000),                                             // (terminated),                        
		.s0_rid      (),                                                    // (terminated),                        
		.s0_rlast    (),                                                    // (terminated),                        
		.s0_ruser    (),                                                    // (terminated),                        
		.s0_wid      (1'b0),                                                // (terminated),                        
		.s0_ardomain (2'b00),                                               // (terminated),                        
		.s0_arsnoop  (4'b0000),                                             // (terminated),                        
		.s0_arbar    (2'b00),                                               // (terminated),                        
		.s0_awdomain (2'b00),                                               // (terminated),                        
		.s0_awsnoop  (3'b000),                                              // (terminated),                        
		.s0_awbar    (2'b00),                                               // (terminated),                        
		.s0_awunique (1'b0),                                                // (terminated),                        
		.m0_wid      (),                                                    // (terminated),                        
		.m0_ardomain (),                                                    // (terminated),                        
		.m0_arsnoop  (),                                                    // (terminated),                        
		.m0_arbar    (),                                                    // (terminated),                        
		.m0_awdomain (),                                                    // (terminated),                        
		.m0_awsnoop  (),                                                    // (terminated),                        
		.m0_awbar    (),                                                    // (terminated),                        
		.m0_awunique ()                                                     // (terminated),                        
	);

	Demo1_altera_merlin_axi_translator_1920_hvn5ezy #(
		.USE_S0_AWID                       (0),
		.USE_S0_AWREGION                   (0),
		.USE_M0_AWREGION                   (1),
		.USE_S0_AWLEN                      (0),
		.USE_S0_AWSIZE                     (1),
		.USE_S0_AWBURST                    (0),
		.USE_S0_AWLOCK                     (0),
		.USE_M0_AWLOCK                     (1),
		.USE_S0_AWCACHE                    (0),
		.USE_M0_AWCACHE                    (1),
		.USE_M0_AWPROT                     (1),
		.USE_S0_AWQOS                      (0),
		.USE_M0_AWQOS                      (1),
		.USE_S0_WSTRB                      (1),
		.USE_M0_WLAST                      (1),
		.USE_S0_BID                        (0),
		.USE_S0_BRESP                      (1),
		.USE_M0_BRESP                      (1),
		.USE_S0_ARID                       (0),
		.USE_S0_ARREGION                   (0),
		.USE_M0_ARREGION                   (1),
		.USE_S0_ARLEN                      (0),
		.USE_S0_ARSIZE                     (1),
		.USE_S0_ARBURST                    (0),
		.USE_S0_ARLOCK                     (0),
		.USE_M0_ARLOCK                     (1),
		.USE_M0_ARCACHE                    (1),
		.USE_M0_ARQOS                      (1),
		.USE_M0_ARPROT                     (1),
		.USE_S0_ARCACHE                    (0),
		.USE_S0_ARQOS                      (0),
		.USE_S0_RID                        (0),
		.USE_S0_RRESP                      (1),
		.USE_M0_RRESP                      (1),
		.USE_S0_RLAST                      (0),
		.M0_ID_WIDTH                       (1),
		.DATA_WIDTH                        (32),
		.S0_ID_WIDTH                       (1),
		.M0_ADDR_WIDTH                     (32),
		.S0_WRITE_ADDR_USER_WIDTH          (1),
		.S0_READ_ADDR_USER_WIDTH           (1),
		.M0_WRITE_ADDR_USER_WIDTH          (1),
		.M0_READ_ADDR_USER_WIDTH           (1),
		.S0_WRITE_DATA_USER_WIDTH          (1),
		.S0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.S0_READ_DATA_USER_WIDTH           (1),
		.M0_WRITE_DATA_USER_WIDTH          (1),
		.M0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.M0_READ_DATA_USER_WIDTH           (1),
		.S0_ADDR_WIDTH                     (32),
		.USE_S0_AWUSER                     (0),
		.USE_S0_ARUSER                     (0),
		.USE_S0_WUSER                      (0),
		.USE_S0_RUSER                      (0),
		.USE_S0_BUSER                      (0),
		.USE_M0_AWUSER                     (1),
		.USE_M0_ARUSER                     (1),
		.USE_M0_WUSER                      (1),
		.USE_M0_RUSER                      (1),
		.USE_M0_BUSER                      (1),
		.M0_AXI_VERSION                    ("AXI4"),
		.M0_BURST_LENGTH_WIDTH             (8),
		.S0_BURST_LENGTH_WIDTH             (8),
		.M0_LOCK_WIDTH                     (1),
		.S0_LOCK_WIDTH                     (1),
		.S0_AXI_VERSION                    ("AXI4"),
		.ACE_LITE_SUPPORT                  (0)
	) intel_niosv_m_0_instruction_manager_translator (
		.aclk        (clock_in_out_clk_clk),                                       //   input,   width = 1,       clk.clk
		.aresetn     (~intel_niosv_m_0_reset_reset_bridge_in_reset_reset),         //   input,   width = 1, clk_reset.reset_n
		.m0_awid     (intel_niosv_m_0_instruction_manager_translator_m0_awid),     //  output,   width = 1,        m0.awid
		.m0_awaddr   (intel_niosv_m_0_instruction_manager_translator_m0_awaddr),   //  output,  width = 32,          .awaddr
		.m0_awlen    (intel_niosv_m_0_instruction_manager_translator_m0_awlen),    //  output,   width = 8,          .awlen
		.m0_awsize   (intel_niosv_m_0_instruction_manager_translator_m0_awsize),   //  output,   width = 3,          .awsize
		.m0_awburst  (intel_niosv_m_0_instruction_manager_translator_m0_awburst),  //  output,   width = 2,          .awburst
		.m0_awlock   (intel_niosv_m_0_instruction_manager_translator_m0_awlock),   //  output,   width = 1,          .awlock
		.m0_awcache  (intel_niosv_m_0_instruction_manager_translator_m0_awcache),  //  output,   width = 4,          .awcache
		.m0_awprot   (intel_niosv_m_0_instruction_manager_translator_m0_awprot),   //  output,   width = 3,          .awprot
		.m0_awuser   (intel_niosv_m_0_instruction_manager_translator_m0_awuser),   //  output,   width = 1,          .awuser
		.m0_awqos    (intel_niosv_m_0_instruction_manager_translator_m0_awqos),    //  output,   width = 4,          .awqos
		.m0_awregion (intel_niosv_m_0_instruction_manager_translator_m0_awregion), //  output,   width = 4,          .awregion
		.m0_awvalid  (intel_niosv_m_0_instruction_manager_translator_m0_awvalid),  //  output,   width = 1,          .awvalid
		.m0_awready  (intel_niosv_m_0_instruction_manager_translator_m0_awready),  //   input,   width = 1,          .awready
		.m0_wdata    (intel_niosv_m_0_instruction_manager_translator_m0_wdata),    //  output,  width = 32,          .wdata
		.m0_wstrb    (intel_niosv_m_0_instruction_manager_translator_m0_wstrb),    //  output,   width = 4,          .wstrb
		.m0_wlast    (intel_niosv_m_0_instruction_manager_translator_m0_wlast),    //  output,   width = 1,          .wlast
		.m0_wvalid   (intel_niosv_m_0_instruction_manager_translator_m0_wvalid),   //  output,   width = 1,          .wvalid
		.m0_wuser    (intel_niosv_m_0_instruction_manager_translator_m0_wuser),    //  output,   width = 1,          .wuser
		.m0_wready   (intel_niosv_m_0_instruction_manager_translator_m0_wready),   //   input,   width = 1,          .wready
		.m0_bid      (intel_niosv_m_0_instruction_manager_translator_m0_bid),      //   input,   width = 1,          .bid
		.m0_bresp    (intel_niosv_m_0_instruction_manager_translator_m0_bresp),    //   input,   width = 2,          .bresp
		.m0_buser    (intel_niosv_m_0_instruction_manager_translator_m0_buser),    //   input,   width = 1,          .buser
		.m0_bvalid   (intel_niosv_m_0_instruction_manager_translator_m0_bvalid),   //   input,   width = 1,          .bvalid
		.m0_bready   (intel_niosv_m_0_instruction_manager_translator_m0_bready),   //  output,   width = 1,          .bready
		.m0_arid     (intel_niosv_m_0_instruction_manager_translator_m0_arid),     //  output,   width = 1,          .arid
		.m0_araddr   (intel_niosv_m_0_instruction_manager_translator_m0_araddr),   //  output,  width = 32,          .araddr
		.m0_arlen    (intel_niosv_m_0_instruction_manager_translator_m0_arlen),    //  output,   width = 8,          .arlen
		.m0_arsize   (intel_niosv_m_0_instruction_manager_translator_m0_arsize),   //  output,   width = 3,          .arsize
		.m0_arburst  (intel_niosv_m_0_instruction_manager_translator_m0_arburst),  //  output,   width = 2,          .arburst
		.m0_arlock   (intel_niosv_m_0_instruction_manager_translator_m0_arlock),   //  output,   width = 1,          .arlock
		.m0_arcache  (intel_niosv_m_0_instruction_manager_translator_m0_arcache),  //  output,   width = 4,          .arcache
		.m0_arprot   (intel_niosv_m_0_instruction_manager_translator_m0_arprot),   //  output,   width = 3,          .arprot
		.m0_aruser   (intel_niosv_m_0_instruction_manager_translator_m0_aruser),   //  output,   width = 1,          .aruser
		.m0_arqos    (intel_niosv_m_0_instruction_manager_translator_m0_arqos),    //  output,   width = 4,          .arqos
		.m0_arregion (intel_niosv_m_0_instruction_manager_translator_m0_arregion), //  output,   width = 4,          .arregion
		.m0_arvalid  (intel_niosv_m_0_instruction_manager_translator_m0_arvalid),  //  output,   width = 1,          .arvalid
		.m0_arready  (intel_niosv_m_0_instruction_manager_translator_m0_arready),  //   input,   width = 1,          .arready
		.m0_rid      (intel_niosv_m_0_instruction_manager_translator_m0_rid),      //   input,   width = 1,          .rid
		.m0_rdata    (intel_niosv_m_0_instruction_manager_translator_m0_rdata),    //   input,  width = 32,          .rdata
		.m0_rresp    (intel_niosv_m_0_instruction_manager_translator_m0_rresp),    //   input,   width = 2,          .rresp
		.m0_rlast    (intel_niosv_m_0_instruction_manager_translator_m0_rlast),    //   input,   width = 1,          .rlast
		.m0_rvalid   (intel_niosv_m_0_instruction_manager_translator_m0_rvalid),   //   input,   width = 1,          .rvalid
		.m0_rready   (intel_niosv_m_0_instruction_manager_translator_m0_rready),   //  output,   width = 1,          .rready
		.m0_ruser    (intel_niosv_m_0_instruction_manager_translator_m0_ruser),    //   input,   width = 1,          .ruser
		.s0_awaddr   (intel_niosv_m_0_instruction_manager_awaddr),                 //   input,  width = 32,        s0.awaddr
		.s0_awsize   (intel_niosv_m_0_instruction_manager_awsize),                 //   input,   width = 3,          .awsize
		.s0_awprot   (intel_niosv_m_0_instruction_manager_awprot),                 //   input,   width = 3,          .awprot
		.s0_awvalid  (intel_niosv_m_0_instruction_manager_awvalid),                //   input,   width = 1,          .awvalid
		.s0_awready  (intel_niosv_m_0_instruction_manager_awready),                //  output,   width = 1,          .awready
		.s0_wdata    (intel_niosv_m_0_instruction_manager_wdata),                  //   input,  width = 32,          .wdata
		.s0_wstrb    (intel_niosv_m_0_instruction_manager_wstrb),                  //   input,   width = 4,          .wstrb
		.s0_wlast    (intel_niosv_m_0_instruction_manager_wlast),                  //   input,   width = 1,          .wlast
		.s0_wvalid   (intel_niosv_m_0_instruction_manager_wvalid),                 //   input,   width = 1,          .wvalid
		.s0_wready   (intel_niosv_m_0_instruction_manager_wready),                 //  output,   width = 1,          .wready
		.s0_bresp    (intel_niosv_m_0_instruction_manager_bresp),                  //  output,   width = 2,          .bresp
		.s0_bvalid   (intel_niosv_m_0_instruction_manager_bvalid),                 //  output,   width = 1,          .bvalid
		.s0_bready   (intel_niosv_m_0_instruction_manager_bready),                 //   input,   width = 1,          .bready
		.s0_araddr   (intel_niosv_m_0_instruction_manager_araddr),                 //   input,  width = 32,          .araddr
		.s0_arsize   (intel_niosv_m_0_instruction_manager_arsize),                 //   input,   width = 3,          .arsize
		.s0_arprot   (intel_niosv_m_0_instruction_manager_arprot),                 //   input,   width = 3,          .arprot
		.s0_arvalid  (intel_niosv_m_0_instruction_manager_arvalid),                //   input,   width = 1,          .arvalid
		.s0_arready  (intel_niosv_m_0_instruction_manager_arready),                //  output,   width = 1,          .arready
		.s0_rdata    (intel_niosv_m_0_instruction_manager_rdata),                  //  output,  width = 32,          .rdata
		.s0_rresp    (intel_niosv_m_0_instruction_manager_rresp),                  //  output,   width = 2,          .rresp
		.s0_rvalid   (intel_niosv_m_0_instruction_manager_rvalid),                 //  output,   width = 1,          .rvalid
		.s0_rready   (intel_niosv_m_0_instruction_manager_rready),                 //   input,   width = 1,          .rready
		.s0_awid     (1'b0),                                                       // (terminated),                        
		.s0_awlen    (8'b00000000),                                                // (terminated),                        
		.s0_awburst  (2'b00),                                                      // (terminated),                        
		.s0_awlock   (1'b0),                                                       // (terminated),                        
		.s0_awcache  (4'b0000),                                                    // (terminated),                        
		.s0_awuser   (1'b0),                                                       // (terminated),                        
		.s0_awqos    (4'b0000),                                                    // (terminated),                        
		.s0_awregion (4'b0000),                                                    // (terminated),                        
		.s0_wuser    (1'b0),                                                       // (terminated),                        
		.s0_bid      (),                                                           // (terminated),                        
		.s0_buser    (),                                                           // (terminated),                        
		.s0_arid     (1'b0),                                                       // (terminated),                        
		.s0_arlen    (8'b00000000),                                                // (terminated),                        
		.s0_arburst  (2'b00),                                                      // (terminated),                        
		.s0_arlock   (1'b0),                                                       // (terminated),                        
		.s0_arcache  (4'b0000),                                                    // (terminated),                        
		.s0_aruser   (1'b0),                                                       // (terminated),                        
		.s0_arqos    (4'b0000),                                                    // (terminated),                        
		.s0_arregion (4'b0000),                                                    // (terminated),                        
		.s0_rid      (),                                                           // (terminated),                        
		.s0_rlast    (),                                                           // (terminated),                        
		.s0_ruser    (),                                                           // (terminated),                        
		.s0_wid      (1'b0),                                                       // (terminated),                        
		.s0_ardomain (2'b00),                                                      // (terminated),                        
		.s0_arsnoop  (4'b0000),                                                    // (terminated),                        
		.s0_arbar    (2'b00),                                                      // (terminated),                        
		.s0_awdomain (2'b00),                                                      // (terminated),                        
		.s0_awsnoop  (3'b000),                                                     // (terminated),                        
		.s0_awbar    (2'b00),                                                      // (terminated),                        
		.s0_awunique (1'b0),                                                       // (terminated),                        
		.m0_wid      (),                                                           // (terminated),                        
		.m0_ardomain (),                                                           // (terminated),                        
		.m0_arsnoop  (),                                                           // (terminated),                        
		.m0_arbar    (),                                                           // (terminated),                        
		.m0_awdomain (),                                                           // (terminated),                        
		.m0_awsnoop  (),                                                           // (terminated),                        
		.m0_awbar    (),                                                           // (terminated),                        
		.m0_awunique ()                                                            // (terminated),                        
	);

	Demo1_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) jtag_uart_0_avalon_jtag_slave_translator (
		.clk                    (clock_in_out_clk_clk),                                 //   input,   width = 1,                      clk.clk
		.reset                  (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),    //   input,   width = 1,                    reset.reset
		.uav_address            (jtag_uart_0_avalon_jtag_slave_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read               (jtag_uart_0_avalon_jtag_slave_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (jtag_uart_0_avalon_jtag_slave_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (jtag_uart_0_avalon_jtag_slave_address),                //  output,   width = 1,      avalon_anti_slave_0.address
		.av_write               (jtag_uart_0_avalon_jtag_slave_write),                  //  output,   width = 1,                         .write
		.av_read                (jtag_uart_0_avalon_jtag_slave_read),                   //  output,   width = 1,                         .read
		.av_readdata            (jtag_uart_0_avalon_jtag_slave_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (jtag_uart_0_avalon_jtag_slave_writedata),              //  output,  width = 32,                         .writedata
		.av_waitrequest         (jtag_uart_0_avalon_jtag_slave_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_chipselect          (jtag_uart_0_avalon_jtag_slave_chipselect),             //  output,   width = 1,                         .chipselect
		.av_begintransfer       (),                                                     // (terminated),                                       
		.av_beginbursttransfer  (),                                                     // (terminated),                                       
		.av_burstcount          (),                                                     // (terminated),                                       
		.av_byteenable          (),                                                     // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                 // (terminated),                                       
		.av_writebyteenable     (),                                                     // (terminated),                                       
		.av_lock                (),                                                     // (terminated),                                       
		.av_clken               (),                                                     // (terminated),                                       
		.uav_clken              (1'b0),                                                 // (terminated),                                       
		.av_debugaccess         (),                                                     // (terminated),                                       
		.av_outputenable        (),                                                     // (terminated),                                       
		.uav_response           (),                                                     // (terminated),                                       
		.av_response            (2'b00),                                                // (terminated),                                       
		.uav_writeresponsevalid (),                                                     // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                  // (terminated),                                       
	);

	Demo1_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (16),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) intel_niosv_m_0_dm_agent_translator (
		.clk                    (clock_in_out_clk_clk),                              //   input,   width = 1,                      clk.clk
		.reset                  (intel_niosv_m_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (intel_niosv_m_0_dm_agent_agent_m0_address),         //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (intel_niosv_m_0_dm_agent_agent_m0_burstcount),      //   input,   width = 3,                         .burstcount
		.uav_read               (intel_niosv_m_0_dm_agent_agent_m0_read),            //   input,   width = 1,                         .read
		.uav_write              (intel_niosv_m_0_dm_agent_agent_m0_write),           //   input,   width = 1,                         .write
		.uav_waitrequest        (intel_niosv_m_0_dm_agent_agent_m0_waitrequest),     //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (intel_niosv_m_0_dm_agent_agent_m0_readdatavalid),   //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (intel_niosv_m_0_dm_agent_agent_m0_byteenable),      //   input,   width = 4,                         .byteenable
		.uav_readdata           (intel_niosv_m_0_dm_agent_agent_m0_readdata),        //  output,  width = 32,                         .readdata
		.uav_writedata          (intel_niosv_m_0_dm_agent_agent_m0_writedata),       //   input,  width = 32,                         .writedata
		.uav_lock               (intel_niosv_m_0_dm_agent_agent_m0_lock),            //   input,   width = 1,                         .lock
		.uav_debugaccess        (intel_niosv_m_0_dm_agent_agent_m0_debugaccess),     //   input,   width = 1,                         .debugaccess
		.av_address             (intel_niosv_m_0_dm_agent_address),                  //  output,  width = 16,      avalon_anti_slave_0.address
		.av_write               (intel_niosv_m_0_dm_agent_write),                    //  output,   width = 1,                         .write
		.av_read                (intel_niosv_m_0_dm_agent_read),                     //  output,   width = 1,                         .read
		.av_readdata            (intel_niosv_m_0_dm_agent_readdata),                 //   input,  width = 32,                         .readdata
		.av_writedata           (intel_niosv_m_0_dm_agent_writedata),                //  output,  width = 32,                         .writedata
		.av_readdatavalid       (intel_niosv_m_0_dm_agent_readdatavalid),            //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (intel_niosv_m_0_dm_agent_waitrequest),              //   input,   width = 1,                         .waitrequest
		.av_begintransfer       (),                                                  // (terminated),                                       
		.av_beginbursttransfer  (),                                                  // (terminated),                                       
		.av_burstcount          (),                                                  // (terminated),                                       
		.av_byteenable          (),                                                  // (terminated),                                       
		.av_writebyteenable     (),                                                  // (terminated),                                       
		.av_lock                (),                                                  // (terminated),                                       
		.av_chipselect          (),                                                  // (terminated),                                       
		.av_clken               (),                                                  // (terminated),                                       
		.uav_clken              (1'b0),                                              // (terminated),                                       
		.av_debugaccess         (),                                                  // (terminated),                                       
		.av_outputenable        (),                                                  // (terminated),                                       
		.uav_response           (),                                                  // (terminated),                                       
		.av_response            (2'b00),                                             // (terminated),                                       
		.uav_writeresponsevalid (),                                                  // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                               // (terminated),                                       
	);

	Demo1_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) onchip_memory2_0_s1_translator (
		.clk                    (clock_in_out_clk_clk),                              //   input,   width = 1,                      clk.clk
		.reset                  (intel_niosv_m_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (onchip_memory2_0_s1_agent_m0_address),              //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (onchip_memory2_0_s1_agent_m0_burstcount),           //   input,   width = 3,                         .burstcount
		.uav_read               (onchip_memory2_0_s1_agent_m0_read),                 //   input,   width = 1,                         .read
		.uav_write              (onchip_memory2_0_s1_agent_m0_write),                //   input,   width = 1,                         .write
		.uav_waitrequest        (onchip_memory2_0_s1_agent_m0_waitrequest),          //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (onchip_memory2_0_s1_agent_m0_readdatavalid),        //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (onchip_memory2_0_s1_agent_m0_byteenable),           //   input,   width = 4,                         .byteenable
		.uav_readdata           (onchip_memory2_0_s1_agent_m0_readdata),             //  output,  width = 32,                         .readdata
		.uav_writedata          (onchip_memory2_0_s1_agent_m0_writedata),            //   input,  width = 32,                         .writedata
		.uav_lock               (onchip_memory2_0_s1_agent_m0_lock),                 //   input,   width = 1,                         .lock
		.uav_debugaccess        (onchip_memory2_0_s1_agent_m0_debugaccess),          //   input,   width = 1,                         .debugaccess
		.av_address             (onchip_memory2_0_s1_address),                       //  output,  width = 10,      avalon_anti_slave_0.address
		.av_write               (onchip_memory2_0_s1_write),                         //  output,   width = 1,                         .write
		.av_readdata            (onchip_memory2_0_s1_readdata),                      //   input,  width = 32,                         .readdata
		.av_writedata           (onchip_memory2_0_s1_writedata),                     //  output,  width = 32,                         .writedata
		.av_byteenable          (onchip_memory2_0_s1_byteenable),                    //  output,   width = 4,                         .byteenable
		.av_chipselect          (onchip_memory2_0_s1_chipselect),                    //  output,   width = 1,                         .chipselect
		.av_clken               (onchip_memory2_0_s1_clken),                         //  output,   width = 1,                         .clken
		.av_read                (),                                                  // (terminated),                                       
		.av_begintransfer       (),                                                  // (terminated),                                       
		.av_beginbursttransfer  (),                                                  // (terminated),                                       
		.av_burstcount          (),                                                  // (terminated),                                       
		.av_readdatavalid       (1'b0),                                              // (terminated),                                       
		.av_waitrequest         (1'b0),                                              // (terminated),                                       
		.av_writebyteenable     (),                                                  // (terminated),                                       
		.av_lock                (),                                                  // (terminated),                                       
		.uav_clken              (1'b0),                                              // (terminated),                                       
		.av_debugaccess         (),                                                  // (terminated),                                       
		.av_outputenable        (),                                                  // (terminated),                                       
		.uav_response           (),                                                  // (terminated),                                       
		.av_response            (2'b00),                                             // (terminated),                                       
		.uav_writeresponsevalid (),                                                  // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                               // (terminated),                                       
	);

	Demo1_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (6),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) intel_niosv_m_0_timer_sw_agent_translator (
		.clk                    (clock_in_out_clk_clk),                                  //   input,   width = 1,                      clk.clk
		.reset                  (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),     //   input,   width = 1,                    reset.reset
		.uav_address            (intel_niosv_m_0_timer_sw_agent_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (intel_niosv_m_0_timer_sw_agent_agent_m0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read               (intel_niosv_m_0_timer_sw_agent_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (intel_niosv_m_0_timer_sw_agent_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (intel_niosv_m_0_timer_sw_agent_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (intel_niosv_m_0_timer_sw_agent_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (intel_niosv_m_0_timer_sw_agent_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (intel_niosv_m_0_timer_sw_agent_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (intel_niosv_m_0_timer_sw_agent_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (intel_niosv_m_0_timer_sw_agent_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (intel_niosv_m_0_timer_sw_agent_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (intel_niosv_m_0_timer_sw_agent_address),                //  output,   width = 6,      avalon_anti_slave_0.address
		.av_write               (intel_niosv_m_0_timer_sw_agent_write),                  //  output,   width = 1,                         .write
		.av_read                (intel_niosv_m_0_timer_sw_agent_read),                   //  output,   width = 1,                         .read
		.av_readdata            (intel_niosv_m_0_timer_sw_agent_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (intel_niosv_m_0_timer_sw_agent_writedata),              //  output,  width = 32,                         .writedata
		.av_byteenable          (intel_niosv_m_0_timer_sw_agent_byteenable),             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (intel_niosv_m_0_timer_sw_agent_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_begintransfer       (),                                                      // (terminated),                                       
		.av_beginbursttransfer  (),                                                      // (terminated),                                       
		.av_burstcount          (),                                                      // (terminated),                                       
		.av_waitrequest         (1'b0),                                                  // (terminated),                                       
		.av_writebyteenable     (),                                                      // (terminated),                                       
		.av_lock                (),                                                      // (terminated),                                       
		.av_chipselect          (),                                                      // (terminated),                                       
		.av_clken               (),                                                      // (terminated),                                       
		.uav_clken              (1'b0),                                                  // (terminated),                                       
		.av_debugaccess         (),                                                      // (terminated),                                       
		.av_outputenable        (),                                                      // (terminated),                                       
		.uav_response           (),                                                      // (terminated),                                       
		.av_response            (2'b00),                                                 // (terminated),                                       
		.uav_writeresponsevalid (),                                                      // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                   // (terminated),                                       
	);

	Demo1_altera_merlin_axi_master_ni_1931_fofi6ka #(
		.ID_WIDTH                  (1),
		.ADDR_WIDTH                (32),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (8),
		.AXI_LOCK_WIDTH            (1),
		.AXI_VERSION               ("AXI4"),
		.ACE_LITE_SUPPORT          (0),
		.WRITE_ISSUING_CAPABILITY  (1),
		.READ_ISSUING_CAPABILITY   (1),
		.PKT_BEGIN_BURST           (99),
		.PKT_CACHE_H               (115),
		.PKT_CACHE_L               (112),
		.PKT_ADDR_SIDEBAND_H       (97),
		.PKT_ADDR_SIDEBAND_L       (97),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (105),
		.PKT_SRC_ID_L              (104),
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (106),
		.PKT_THREAD_ID_H           (108),
		.PKT_THREAD_ID_L           (108),
		.PKT_QOS_L                 (100),
		.PKT_QOS_H                 (103),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_DATA_SIDEBAND_H       (98),
		.PKT_DATA_SIDEBAND_L       (98),
		.PKT_DOMAIN_H              (128),
		.PKT_DOMAIN_L              (127),
		.PKT_SNOOP_H               (126),
		.PKT_SNOOP_L               (123),
		.PKT_BARRIER_H             (122),
		.PKT_BARRIER_L             (121),
		.PKT_WUNIQUE               (129),
		.ST_DATA_W                 (130),
		.ST_CHANNEL_W              (4),
		.ID                        (0),
		.SYNC_RESET                (0)
	) intel_niosv_m_0_data_manager_agent (
		.aclk                   (clock_in_out_clk_clk),                                      //   input,    width = 1,              clk.clk
		.aresetn                (~intel_niosv_m_0_reset_reset_bridge_in_reset_reset),        //   input,    width = 1,        clk_reset.reset_n
		.write_cp_valid         (intel_niosv_m_0_data_manager_agent_write_cp_valid),         //  output,    width = 1,         write_cp.valid
		.write_cp_data          (intel_niosv_m_0_data_manager_agent_write_cp_data),          //  output,  width = 130,                 .data
		.write_cp_startofpacket (intel_niosv_m_0_data_manager_agent_write_cp_startofpacket), //  output,    width = 1,                 .startofpacket
		.write_cp_endofpacket   (intel_niosv_m_0_data_manager_agent_write_cp_endofpacket),   //  output,    width = 1,                 .endofpacket
		.write_cp_ready         (intel_niosv_m_0_data_manager_agent_write_cp_ready),         //   input,    width = 1,                 .ready
		.write_rp_valid         (rsp_mux_src_valid),                                         //   input,    width = 1,         write_rp.valid
		.write_rp_data          (rsp_mux_src_data),                                          //   input,  width = 130,                 .data
		.write_rp_channel       (rsp_mux_src_channel),                                       //   input,    width = 4,                 .channel
		.write_rp_startofpacket (rsp_mux_src_startofpacket),                                 //   input,    width = 1,                 .startofpacket
		.write_rp_endofpacket   (rsp_mux_src_endofpacket),                                   //   input,    width = 1,                 .endofpacket
		.write_rp_ready         (rsp_mux_src_ready),                                         //  output,    width = 1,                 .ready
		.read_cp_valid          (intel_niosv_m_0_data_manager_agent_read_cp_valid),          //  output,    width = 1,          read_cp.valid
		.read_cp_data           (intel_niosv_m_0_data_manager_agent_read_cp_data),           //  output,  width = 130,                 .data
		.read_cp_startofpacket  (intel_niosv_m_0_data_manager_agent_read_cp_startofpacket),  //  output,    width = 1,                 .startofpacket
		.read_cp_endofpacket    (intel_niosv_m_0_data_manager_agent_read_cp_endofpacket),    //  output,    width = 1,                 .endofpacket
		.read_cp_ready          (intel_niosv_m_0_data_manager_agent_read_cp_ready),          //   input,    width = 1,                 .ready
		.read_rp_valid          (rsp_mux_001_src_valid),                                     //   input,    width = 1,          read_rp.valid
		.read_rp_data           (rsp_mux_001_src_data),                                      //   input,  width = 130,                 .data
		.read_rp_channel        (rsp_mux_001_src_channel),                                   //   input,    width = 4,                 .channel
		.read_rp_startofpacket  (rsp_mux_001_src_startofpacket),                             //   input,    width = 1,                 .startofpacket
		.read_rp_endofpacket    (rsp_mux_001_src_endofpacket),                               //   input,    width = 1,                 .endofpacket
		.read_rp_ready          (rsp_mux_001_src_ready),                                     //  output,    width = 1,                 .ready
		.awid                   (intel_niosv_m_0_data_manager_translator_m0_awid),           //   input,    width = 1, altera_axi_slave.awid
		.awaddr                 (intel_niosv_m_0_data_manager_translator_m0_awaddr),         //   input,   width = 32,                 .awaddr
		.awlen                  (intel_niosv_m_0_data_manager_translator_m0_awlen),          //   input,    width = 8,                 .awlen
		.awsize                 (intel_niosv_m_0_data_manager_translator_m0_awsize),         //   input,    width = 3,                 .awsize
		.awburst                (intel_niosv_m_0_data_manager_translator_m0_awburst),        //   input,    width = 2,                 .awburst
		.awlock                 (intel_niosv_m_0_data_manager_translator_m0_awlock),         //   input,    width = 1,                 .awlock
		.awcache                (intel_niosv_m_0_data_manager_translator_m0_awcache),        //   input,    width = 4,                 .awcache
		.awprot                 (intel_niosv_m_0_data_manager_translator_m0_awprot),         //   input,    width = 3,                 .awprot
		.awuser                 (intel_niosv_m_0_data_manager_translator_m0_awuser),         //   input,    width = 1,                 .awuser
		.awqos                  (intel_niosv_m_0_data_manager_translator_m0_awqos),          //   input,    width = 4,                 .awqos
		.awregion               (intel_niosv_m_0_data_manager_translator_m0_awregion),       //   input,    width = 4,                 .awregion
		.awvalid                (intel_niosv_m_0_data_manager_translator_m0_awvalid),        //   input,    width = 1,                 .awvalid
		.awready                (intel_niosv_m_0_data_manager_translator_m0_awready),        //  output,    width = 1,                 .awready
		.wdata                  (intel_niosv_m_0_data_manager_translator_m0_wdata),          //   input,   width = 32,                 .wdata
		.wstrb                  (intel_niosv_m_0_data_manager_translator_m0_wstrb),          //   input,    width = 4,                 .wstrb
		.wlast                  (intel_niosv_m_0_data_manager_translator_m0_wlast),          //   input,    width = 1,                 .wlast
		.wvalid                 (intel_niosv_m_0_data_manager_translator_m0_wvalid),         //   input,    width = 1,                 .wvalid
		.wuser                  (intel_niosv_m_0_data_manager_translator_m0_wuser),          //   input,    width = 1,                 .wuser
		.wready                 (intel_niosv_m_0_data_manager_translator_m0_wready),         //  output,    width = 1,                 .wready
		.bid                    (intel_niosv_m_0_data_manager_translator_m0_bid),            //  output,    width = 1,                 .bid
		.bresp                  (intel_niosv_m_0_data_manager_translator_m0_bresp),          //  output,    width = 2,                 .bresp
		.buser                  (intel_niosv_m_0_data_manager_translator_m0_buser),          //  output,    width = 1,                 .buser
		.bvalid                 (intel_niosv_m_0_data_manager_translator_m0_bvalid),         //  output,    width = 1,                 .bvalid
		.bready                 (intel_niosv_m_0_data_manager_translator_m0_bready),         //   input,    width = 1,                 .bready
		.arid                   (intel_niosv_m_0_data_manager_translator_m0_arid),           //   input,    width = 1,                 .arid
		.araddr                 (intel_niosv_m_0_data_manager_translator_m0_araddr),         //   input,   width = 32,                 .araddr
		.arlen                  (intel_niosv_m_0_data_manager_translator_m0_arlen),          //   input,    width = 8,                 .arlen
		.arsize                 (intel_niosv_m_0_data_manager_translator_m0_arsize),         //   input,    width = 3,                 .arsize
		.arburst                (intel_niosv_m_0_data_manager_translator_m0_arburst),        //   input,    width = 2,                 .arburst
		.arlock                 (intel_niosv_m_0_data_manager_translator_m0_arlock),         //   input,    width = 1,                 .arlock
		.arcache                (intel_niosv_m_0_data_manager_translator_m0_arcache),        //   input,    width = 4,                 .arcache
		.arprot                 (intel_niosv_m_0_data_manager_translator_m0_arprot),         //   input,    width = 3,                 .arprot
		.aruser                 (intel_niosv_m_0_data_manager_translator_m0_aruser),         //   input,    width = 1,                 .aruser
		.arqos                  (intel_niosv_m_0_data_manager_translator_m0_arqos),          //   input,    width = 4,                 .arqos
		.arregion               (intel_niosv_m_0_data_manager_translator_m0_arregion),       //   input,    width = 4,                 .arregion
		.arvalid                (intel_niosv_m_0_data_manager_translator_m0_arvalid),        //   input,    width = 1,                 .arvalid
		.arready                (intel_niosv_m_0_data_manager_translator_m0_arready),        //  output,    width = 1,                 .arready
		.rid                    (intel_niosv_m_0_data_manager_translator_m0_rid),            //  output,    width = 1,                 .rid
		.rdata                  (intel_niosv_m_0_data_manager_translator_m0_rdata),          //  output,   width = 32,                 .rdata
		.rresp                  (intel_niosv_m_0_data_manager_translator_m0_rresp),          //  output,    width = 2,                 .rresp
		.rlast                  (intel_niosv_m_0_data_manager_translator_m0_rlast),          //  output,    width = 1,                 .rlast
		.rvalid                 (intel_niosv_m_0_data_manager_translator_m0_rvalid),         //  output,    width = 1,                 .rvalid
		.rready                 (intel_niosv_m_0_data_manager_translator_m0_rready),         //   input,    width = 1,                 .rready
		.ruser                  (intel_niosv_m_0_data_manager_translator_m0_ruser),          //  output,    width = 1,                 .ruser
		.wid                    (1'b0),                                                      // (terminated),                                
		.arsnoop                (4'b0000),                                                   // (terminated),                                
		.ardomain               (2'b00),                                                     // (terminated),                                
		.arbar                  (2'b00),                                                     // (terminated),                                
		.awsnoop                (3'b000),                                                    // (terminated),                                
		.awdomain               (2'b00),                                                     // (terminated),                                
		.awbar                  (2'b00),                                                     // (terminated),                                
		.awunique               (1'b0)                                                       // (terminated),                                
	);

	Demo1_altera_merlin_axi_master_ni_1931_fofi6ka #(
		.ID_WIDTH                  (1),
		.ADDR_WIDTH                (32),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (8),
		.AXI_LOCK_WIDTH            (1),
		.AXI_VERSION               ("AXI4"),
		.ACE_LITE_SUPPORT          (0),
		.WRITE_ISSUING_CAPABILITY  (1),
		.READ_ISSUING_CAPABILITY   (2),
		.PKT_BEGIN_BURST           (99),
		.PKT_CACHE_H               (115),
		.PKT_CACHE_L               (112),
		.PKT_ADDR_SIDEBAND_H       (97),
		.PKT_ADDR_SIDEBAND_L       (97),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (105),
		.PKT_SRC_ID_L              (104),
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (106),
		.PKT_THREAD_ID_H           (108),
		.PKT_THREAD_ID_L           (108),
		.PKT_QOS_L                 (100),
		.PKT_QOS_H                 (103),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_DATA_SIDEBAND_H       (98),
		.PKT_DATA_SIDEBAND_L       (98),
		.PKT_DOMAIN_H              (128),
		.PKT_DOMAIN_L              (127),
		.PKT_SNOOP_H               (126),
		.PKT_SNOOP_L               (123),
		.PKT_BARRIER_H             (122),
		.PKT_BARRIER_L             (121),
		.PKT_WUNIQUE               (129),
		.ST_DATA_W                 (130),
		.ST_CHANNEL_W              (4),
		.ID                        (1),
		.SYNC_RESET                (0)
	) intel_niosv_m_0_instruction_manager_agent (
		.aclk                   (clock_in_out_clk_clk),                                                 //   input,    width = 1,              clk.clk
		.aresetn                (~intel_niosv_m_0_reset_reset_bridge_in_reset_reset),                   //   input,    width = 1,        clk_reset.reset_n
		.write_cp_valid         (intel_niosv_m_0_instruction_manager_agent_write_cp_valid),             //  output,    width = 1,         write_cp.valid
		.write_cp_data          (intel_niosv_m_0_instruction_manager_agent_write_cp_data),              //  output,  width = 130,                 .data
		.write_cp_startofpacket (intel_niosv_m_0_instruction_manager_agent_write_cp_startofpacket),     //  output,    width = 1,                 .startofpacket
		.write_cp_endofpacket   (intel_niosv_m_0_instruction_manager_agent_write_cp_endofpacket),       //  output,    width = 1,                 .endofpacket
		.write_cp_ready         (intel_niosv_m_0_instruction_manager_agent_write_cp_ready),             //   input,    width = 1,                 .ready
		.write_rp_valid         (intel_niosv_m_0_instruction_manager_wr_limiter_rsp_src_valid),         //   input,    width = 1,         write_rp.valid
		.write_rp_data          (intel_niosv_m_0_instruction_manager_wr_limiter_rsp_src_data),          //   input,  width = 130,                 .data
		.write_rp_channel       (intel_niosv_m_0_instruction_manager_wr_limiter_rsp_src_channel),       //   input,    width = 4,                 .channel
		.write_rp_startofpacket (intel_niosv_m_0_instruction_manager_wr_limiter_rsp_src_startofpacket), //   input,    width = 1,                 .startofpacket
		.write_rp_endofpacket   (intel_niosv_m_0_instruction_manager_wr_limiter_rsp_src_endofpacket),   //   input,    width = 1,                 .endofpacket
		.write_rp_ready         (intel_niosv_m_0_instruction_manager_wr_limiter_rsp_src_ready),         //  output,    width = 1,                 .ready
		.read_cp_valid          (intel_niosv_m_0_instruction_manager_agent_read_cp_valid),              //  output,    width = 1,          read_cp.valid
		.read_cp_data           (intel_niosv_m_0_instruction_manager_agent_read_cp_data),               //  output,  width = 130,                 .data
		.read_cp_startofpacket  (intel_niosv_m_0_instruction_manager_agent_read_cp_startofpacket),      //  output,    width = 1,                 .startofpacket
		.read_cp_endofpacket    (intel_niosv_m_0_instruction_manager_agent_read_cp_endofpacket),        //  output,    width = 1,                 .endofpacket
		.read_cp_ready          (intel_niosv_m_0_instruction_manager_agent_read_cp_ready),              //   input,    width = 1,                 .ready
		.read_rp_valid          (intel_niosv_m_0_instruction_manager_rd_limiter_rsp_src_valid),         //   input,    width = 1,          read_rp.valid
		.read_rp_data           (intel_niosv_m_0_instruction_manager_rd_limiter_rsp_src_data),          //   input,  width = 130,                 .data
		.read_rp_channel        (intel_niosv_m_0_instruction_manager_rd_limiter_rsp_src_channel),       //   input,    width = 4,                 .channel
		.read_rp_startofpacket  (intel_niosv_m_0_instruction_manager_rd_limiter_rsp_src_startofpacket), //   input,    width = 1,                 .startofpacket
		.read_rp_endofpacket    (intel_niosv_m_0_instruction_manager_rd_limiter_rsp_src_endofpacket),   //   input,    width = 1,                 .endofpacket
		.read_rp_ready          (intel_niosv_m_0_instruction_manager_rd_limiter_rsp_src_ready),         //  output,    width = 1,                 .ready
		.awid                   (intel_niosv_m_0_instruction_manager_translator_m0_awid),               //   input,    width = 1, altera_axi_slave.awid
		.awaddr                 (intel_niosv_m_0_instruction_manager_translator_m0_awaddr),             //   input,   width = 32,                 .awaddr
		.awlen                  (intel_niosv_m_0_instruction_manager_translator_m0_awlen),              //   input,    width = 8,                 .awlen
		.awsize                 (intel_niosv_m_0_instruction_manager_translator_m0_awsize),             //   input,    width = 3,                 .awsize
		.awburst                (intel_niosv_m_0_instruction_manager_translator_m0_awburst),            //   input,    width = 2,                 .awburst
		.awlock                 (intel_niosv_m_0_instruction_manager_translator_m0_awlock),             //   input,    width = 1,                 .awlock
		.awcache                (intel_niosv_m_0_instruction_manager_translator_m0_awcache),            //   input,    width = 4,                 .awcache
		.awprot                 (intel_niosv_m_0_instruction_manager_translator_m0_awprot),             //   input,    width = 3,                 .awprot
		.awuser                 (intel_niosv_m_0_instruction_manager_translator_m0_awuser),             //   input,    width = 1,                 .awuser
		.awqos                  (intel_niosv_m_0_instruction_manager_translator_m0_awqos),              //   input,    width = 4,                 .awqos
		.awregion               (intel_niosv_m_0_instruction_manager_translator_m0_awregion),           //   input,    width = 4,                 .awregion
		.awvalid                (intel_niosv_m_0_instruction_manager_translator_m0_awvalid),            //   input,    width = 1,                 .awvalid
		.awready                (intel_niosv_m_0_instruction_manager_translator_m0_awready),            //  output,    width = 1,                 .awready
		.wdata                  (intel_niosv_m_0_instruction_manager_translator_m0_wdata),              //   input,   width = 32,                 .wdata
		.wstrb                  (intel_niosv_m_0_instruction_manager_translator_m0_wstrb),              //   input,    width = 4,                 .wstrb
		.wlast                  (intel_niosv_m_0_instruction_manager_translator_m0_wlast),              //   input,    width = 1,                 .wlast
		.wvalid                 (intel_niosv_m_0_instruction_manager_translator_m0_wvalid),             //   input,    width = 1,                 .wvalid
		.wuser                  (intel_niosv_m_0_instruction_manager_translator_m0_wuser),              //   input,    width = 1,                 .wuser
		.wready                 (intel_niosv_m_0_instruction_manager_translator_m0_wready),             //  output,    width = 1,                 .wready
		.bid                    (intel_niosv_m_0_instruction_manager_translator_m0_bid),                //  output,    width = 1,                 .bid
		.bresp                  (intel_niosv_m_0_instruction_manager_translator_m0_bresp),              //  output,    width = 2,                 .bresp
		.buser                  (intel_niosv_m_0_instruction_manager_translator_m0_buser),              //  output,    width = 1,                 .buser
		.bvalid                 (intel_niosv_m_0_instruction_manager_translator_m0_bvalid),             //  output,    width = 1,                 .bvalid
		.bready                 (intel_niosv_m_0_instruction_manager_translator_m0_bready),             //   input,    width = 1,                 .bready
		.arid                   (intel_niosv_m_0_instruction_manager_translator_m0_arid),               //   input,    width = 1,                 .arid
		.araddr                 (intel_niosv_m_0_instruction_manager_translator_m0_araddr),             //   input,   width = 32,                 .araddr
		.arlen                  (intel_niosv_m_0_instruction_manager_translator_m0_arlen),              //   input,    width = 8,                 .arlen
		.arsize                 (intel_niosv_m_0_instruction_manager_translator_m0_arsize),             //   input,    width = 3,                 .arsize
		.arburst                (intel_niosv_m_0_instruction_manager_translator_m0_arburst),            //   input,    width = 2,                 .arburst
		.arlock                 (intel_niosv_m_0_instruction_manager_translator_m0_arlock),             //   input,    width = 1,                 .arlock
		.arcache                (intel_niosv_m_0_instruction_manager_translator_m0_arcache),            //   input,    width = 4,                 .arcache
		.arprot                 (intel_niosv_m_0_instruction_manager_translator_m0_arprot),             //   input,    width = 3,                 .arprot
		.aruser                 (intel_niosv_m_0_instruction_manager_translator_m0_aruser),             //   input,    width = 1,                 .aruser
		.arqos                  (intel_niosv_m_0_instruction_manager_translator_m0_arqos),              //   input,    width = 4,                 .arqos
		.arregion               (intel_niosv_m_0_instruction_manager_translator_m0_arregion),           //   input,    width = 4,                 .arregion
		.arvalid                (intel_niosv_m_0_instruction_manager_translator_m0_arvalid),            //   input,    width = 1,                 .arvalid
		.arready                (intel_niosv_m_0_instruction_manager_translator_m0_arready),            //  output,    width = 1,                 .arready
		.rid                    (intel_niosv_m_0_instruction_manager_translator_m0_rid),                //  output,    width = 1,                 .rid
		.rdata                  (intel_niosv_m_0_instruction_manager_translator_m0_rdata),              //  output,   width = 32,                 .rdata
		.rresp                  (intel_niosv_m_0_instruction_manager_translator_m0_rresp),              //  output,    width = 2,                 .rresp
		.rlast                  (intel_niosv_m_0_instruction_manager_translator_m0_rlast),              //  output,    width = 1,                 .rlast
		.rvalid                 (intel_niosv_m_0_instruction_manager_translator_m0_rvalid),             //  output,    width = 1,                 .rvalid
		.rready                 (intel_niosv_m_0_instruction_manager_translator_m0_rready),             //   input,    width = 1,                 .rready
		.ruser                  (intel_niosv_m_0_instruction_manager_translator_m0_ruser),              //  output,    width = 1,                 .ruser
		.wid                    (1'b0),                                                                 // (terminated),                                
		.arsnoop                (4'b0000),                                                              // (terminated),                                
		.ardomain               (2'b00),                                                                // (terminated),                                
		.arbar                  (2'b00),                                                                // (terminated),                                
		.awsnoop                (3'b000),                                                               // (terminated),                                
		.awdomain               (2'b00),                                                                // (terminated),                                
		.awbar                  (2'b00),                                                                // (terminated),                                
		.awunique               (1'b0)                                                                  // (terminated),                                
	);

	Demo1_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (105),
		.PKT_SRC_ID_L              (104),
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (106),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (130),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) jtag_uart_0_avalon_jtag_slave_agent (
		.clk                     (clock_in_out_clk_clk),                                              //   input,    width = 1,             clk.clk
		.reset                   (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),                 //   input,    width = 1,       clk_reset.reset
		.m0_address              (jtag_uart_0_avalon_jtag_slave_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),                 //  output,    width = 3,                .burstcount
		.m0_byteenable           (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (jtag_uart_0_avalon_jtag_slave_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (jtag_uart_0_avalon_jtag_slave_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (jtag_uart_0_avalon_jtag_slave_agent_rp_data),                       //  output,  width = 130,                .data
		.rp_startofpacket        (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_data),          //   input,  width = 130,                .data
		.cp_startofpacket        (jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_channel),       //   input,    width = 4,                .channel
		.rf_sink_ready           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),             //   input,  width = 131,                .data
		.rf_source_ready         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),                //  output,  width = 131,                .data
		.rdata_fifo_sink_ready   (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                             // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                              // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                               // (terminated),                               
	);

	Demo1_altera_avalon_sc_fifo_1930_pqv24kq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (131),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset             (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),              //   input,    width = 1, clk_reset.reset
		.in_data           (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),             //   input,  width = 131,        in.data
		.in_valid          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //  output,  width = 131,       out.data
		.out_valid         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated),                         
		.csr_read          (1'b0),                                                           // (terminated),                         
		.csr_write         (1'b0),                                                           // (terminated),                         
		.csr_readdata      (),                                                               // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated),                         
		.almost_full_data  (),                                                               // (terminated),                         
		.almost_empty_data (),                                                               // (terminated),                         
		.in_empty          (1'b0),                                                           // (terminated),                         
		.out_empty         (),                                                               // (terminated),                         
		.in_error          (1'b0),                                                           // (terminated),                         
		.out_error         (),                                                               // (terminated),                         
		.in_channel        (1'b0),                                                           // (terminated),                         
		.out_channel       ()                                                                // (terminated),                         
	);

	Demo1_altera_avalon_sc_fifo_1930_pqv24kq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo (
		.clk               (clock_in_out_clk_clk),                                     //   input,   width = 1,       clk.clk
		.reset             (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),        //   input,   width = 1, clk_reset.reset
		.in_data           (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                    // (terminated),                        
		.csr_read          (1'b0),                                                     // (terminated),                        
		.csr_write         (1'b0),                                                     // (terminated),                        
		.csr_readdata      (),                                                         // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated),                        
		.almost_full_data  (),                                                         // (terminated),                        
		.almost_empty_data (),                                                         // (terminated),                        
		.in_startofpacket  (1'b0),                                                     // (terminated),                        
		.in_endofpacket    (1'b0),                                                     // (terminated),                        
		.out_startofpacket (),                                                         // (terminated),                        
		.out_endofpacket   (),                                                         // (terminated),                        
		.in_empty          (1'b0),                                                     // (terminated),                        
		.out_empty         (),                                                         // (terminated),                        
		.in_error          (1'b0),                                                     // (terminated),                        
		.out_error         (),                                                         // (terminated),                        
		.in_channel        (1'b0),                                                     // (terminated),                        
		.out_channel       ()                                                          // (terminated),                        
	);

	Demo1_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (105),
		.PKT_SRC_ID_L              (104),
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (106),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (130),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) intel_niosv_m_0_dm_agent_agent (
		.clk                     (clock_in_out_clk_clk),                                         //   input,    width = 1,             clk.clk
		.reset                   (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),            //   input,    width = 1,       clk_reset.reset
		.m0_address              (intel_niosv_m_0_dm_agent_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (intel_niosv_m_0_dm_agent_agent_m0_burstcount),                 //  output,    width = 3,                .burstcount
		.m0_byteenable           (intel_niosv_m_0_dm_agent_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (intel_niosv_m_0_dm_agent_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (intel_niosv_m_0_dm_agent_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (intel_niosv_m_0_dm_agent_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (intel_niosv_m_0_dm_agent_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (intel_niosv_m_0_dm_agent_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (intel_niosv_m_0_dm_agent_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (intel_niosv_m_0_dm_agent_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (intel_niosv_m_0_dm_agent_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (intel_niosv_m_0_dm_agent_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (intel_niosv_m_0_dm_agent_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (intel_niosv_m_0_dm_agent_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (intel_niosv_m_0_dm_agent_agent_rp_data),                       //  output,  width = 130,                .data
		.rp_startofpacket        (intel_niosv_m_0_dm_agent_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (intel_niosv_m_0_dm_agent_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (intel_niosv_m_0_dm_agent_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (intel_niosv_m_0_dm_agent_burst_adapter_source0_data),          //   input,  width = 130,                .data
		.cp_startofpacket        (intel_niosv_m_0_dm_agent_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (intel_niosv_m_0_dm_agent_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (intel_niosv_m_0_dm_agent_burst_adapter_source0_channel),       //   input,    width = 4,                .channel
		.rf_sink_ready           (intel_niosv_m_0_dm_agent_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (intel_niosv_m_0_dm_agent_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (intel_niosv_m_0_dm_agent_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (intel_niosv_m_0_dm_agent_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (intel_niosv_m_0_dm_agent_agent_rsp_fifo_out_data),             //   input,  width = 131,                .data
		.rf_source_ready         (intel_niosv_m_0_dm_agent_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (intel_niosv_m_0_dm_agent_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (intel_niosv_m_0_dm_agent_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (intel_niosv_m_0_dm_agent_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (intel_niosv_m_0_dm_agent_agent_rf_source_data),                //  output,  width = 131,                .data
		.rdata_fifo_sink_ready   (intel_niosv_m_0_dm_agent_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (intel_niosv_m_0_dm_agent_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (intel_niosv_m_0_dm_agent_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (intel_niosv_m_0_dm_agent_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (intel_niosv_m_0_dm_agent_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (intel_niosv_m_0_dm_agent_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                        // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                         // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                          // (terminated),                               
	);

	Demo1_altera_avalon_sc_fifo_1930_pqv24kq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (131),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) intel_niosv_m_0_dm_agent_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset             (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),         //   input,    width = 1, clk_reset.reset
		.in_data           (intel_niosv_m_0_dm_agent_agent_rf_source_data),             //   input,  width = 131,        in.data
		.in_valid          (intel_niosv_m_0_dm_agent_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (intel_niosv_m_0_dm_agent_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (intel_niosv_m_0_dm_agent_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (intel_niosv_m_0_dm_agent_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (intel_niosv_m_0_dm_agent_agent_rsp_fifo_out_data),          //  output,  width = 131,       out.data
		.out_valid         (intel_niosv_m_0_dm_agent_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (intel_niosv_m_0_dm_agent_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (intel_niosv_m_0_dm_agent_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (intel_niosv_m_0_dm_agent_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated),                         
		.csr_read          (1'b0),                                                      // (terminated),                         
		.csr_write         (1'b0),                                                      // (terminated),                         
		.csr_readdata      (),                                                          // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated),                         
		.almost_full_data  (),                                                          // (terminated),                         
		.almost_empty_data (),                                                          // (terminated),                         
		.in_empty          (1'b0),                                                      // (terminated),                         
		.out_empty         (),                                                          // (terminated),                         
		.in_error          (1'b0),                                                      // (terminated),                         
		.out_error         (),                                                          // (terminated),                         
		.in_channel        (1'b0),                                                      // (terminated),                         
		.out_channel       ()                                                           // (terminated),                         
	);

	Demo1_altera_avalon_sc_fifo_1930_pqv24kq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) intel_niosv_m_0_dm_agent_agent_rdata_fifo (
		.clk               (clock_in_out_clk_clk),                                //   input,   width = 1,       clk.clk
		.reset             (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),   //   input,   width = 1, clk_reset.reset
		.in_data           (intel_niosv_m_0_dm_agent_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (intel_niosv_m_0_dm_agent_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (intel_niosv_m_0_dm_agent_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (intel_niosv_m_0_dm_agent_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (intel_niosv_m_0_dm_agent_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (intel_niosv_m_0_dm_agent_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                               // (terminated),                        
		.csr_read          (1'b0),                                                // (terminated),                        
		.csr_write         (1'b0),                                                // (terminated),                        
		.csr_readdata      (),                                                    // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated),                        
		.almost_full_data  (),                                                    // (terminated),                        
		.almost_empty_data (),                                                    // (terminated),                        
		.in_startofpacket  (1'b0),                                                // (terminated),                        
		.in_endofpacket    (1'b0),                                                // (terminated),                        
		.out_startofpacket (),                                                    // (terminated),                        
		.out_endofpacket   (),                                                    // (terminated),                        
		.in_empty          (1'b0),                                                // (terminated),                        
		.out_empty         (),                                                    // (terminated),                        
		.in_error          (1'b0),                                                // (terminated),                        
		.out_error         (),                                                    // (terminated),                        
		.in_channel        (1'b0),                                                // (terminated),                        
		.out_channel       ()                                                     // (terminated),                        
	);

	Demo1_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (105),
		.PKT_SRC_ID_L              (104),
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (106),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (130),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) onchip_memory2_0_s1_agent (
		.clk                     (clock_in_out_clk_clk),                                    //   input,    width = 1,             clk.clk
		.reset                   (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),       //   input,    width = 1,       clk_reset.reset
		.m0_address              (onchip_memory2_0_s1_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (onchip_memory2_0_s1_agent_m0_burstcount),                 //  output,    width = 3,                .burstcount
		.m0_byteenable           (onchip_memory2_0_s1_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (onchip_memory2_0_s1_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (onchip_memory2_0_s1_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (onchip_memory2_0_s1_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (onchip_memory2_0_s1_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (onchip_memory2_0_s1_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (onchip_memory2_0_s1_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (onchip_memory2_0_s1_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (onchip_memory2_0_s1_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (onchip_memory2_0_s1_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (onchip_memory2_0_s1_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (onchip_memory2_0_s1_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (onchip_memory2_0_s1_agent_rp_data),                       //  output,  width = 130,                .data
		.rp_startofpacket        (onchip_memory2_0_s1_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (onchip_memory2_0_s1_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (onchip_memory2_0_s1_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (onchip_memory2_0_s1_burst_adapter_source0_data),          //   input,  width = 130,                .data
		.cp_startofpacket        (onchip_memory2_0_s1_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (onchip_memory2_0_s1_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (onchip_memory2_0_s1_burst_adapter_source0_channel),       //   input,    width = 4,                .channel
		.rf_sink_ready           (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (onchip_memory2_0_s1_agent_rsp_fifo_out_data),             //   input,  width = 131,                .data
		.rf_source_ready         (onchip_memory2_0_s1_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (onchip_memory2_0_s1_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (onchip_memory2_0_s1_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (onchip_memory2_0_s1_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (onchip_memory2_0_s1_agent_rf_source_data),                //  output,  width = 131,                .data
		.rdata_fifo_sink_ready   (onchip_memory2_0_s1_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (onchip_memory2_0_s1_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (onchip_memory2_0_s1_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (onchip_memory2_0_s1_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory2_0_s1_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (onchip_memory2_0_s1_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                   // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                    // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                     // (terminated),                               
	);

	Demo1_altera_avalon_sc_fifo_1930_pqv24kq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (131),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) onchip_memory2_0_s1_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                                 //   input,    width = 1,       clk.clk
		.reset             (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),    //   input,    width = 1, clk_reset.reset
		.in_data           (onchip_memory2_0_s1_agent_rf_source_data),             //   input,  width = 131,        in.data
		.in_valid          (onchip_memory2_0_s1_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (onchip_memory2_0_s1_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (onchip_memory2_0_s1_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (onchip_memory2_0_s1_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (onchip_memory2_0_s1_agent_rsp_fifo_out_data),          //  output,  width = 131,       out.data
		.out_valid         (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                // (terminated),                         
		.csr_read          (1'b0),                                                 // (terminated),                         
		.csr_write         (1'b0),                                                 // (terminated),                         
		.csr_readdata      (),                                                     // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated),                         
		.almost_full_data  (),                                                     // (terminated),                         
		.almost_empty_data (),                                                     // (terminated),                         
		.in_empty          (1'b0),                                                 // (terminated),                         
		.out_empty         (),                                                     // (terminated),                         
		.in_error          (1'b0),                                                 // (terminated),                         
		.out_error         (),                                                     // (terminated),                         
		.in_channel        (1'b0),                                                 // (terminated),                         
		.out_channel       ()                                                      // (terminated),                         
	);

	Demo1_altera_avalon_sc_fifo_1930_pqv24kq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) onchip_memory2_0_s1_agent_rdata_fifo (
		.clk               (clock_in_out_clk_clk),                              //   input,   width = 1,       clk.clk
		.reset             (intel_niosv_m_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.in_data           (onchip_memory2_0_s1_agent_rdata_fifo_src_data),     //   input,  width = 34,        in.data
		.in_valid          (onchip_memory2_0_s1_agent_rdata_fifo_src_valid),    //   input,   width = 1,          .valid
		.in_ready          (onchip_memory2_0_s1_agent_rdata_fifo_src_ready),    //  output,   width = 1,          .ready
		.out_data          (onchip_memory2_0_s1_agent_rdata_fifo_out_data),     //  output,  width = 34,       out.data
		.out_valid         (onchip_memory2_0_s1_agent_rdata_fifo_out_valid),    //  output,   width = 1,          .valid
		.out_ready         (onchip_memory2_0_s1_agent_rdata_fifo_out_ready),    //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                             // (terminated),                        
		.csr_read          (1'b0),                                              // (terminated),                        
		.csr_write         (1'b0),                                              // (terminated),                        
		.csr_readdata      (),                                                  // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated),                        
		.almost_full_data  (),                                                  // (terminated),                        
		.almost_empty_data (),                                                  // (terminated),                        
		.in_startofpacket  (1'b0),                                              // (terminated),                        
		.in_endofpacket    (1'b0),                                              // (terminated),                        
		.out_startofpacket (),                                                  // (terminated),                        
		.out_endofpacket   (),                                                  // (terminated),                        
		.in_empty          (1'b0),                                              // (terminated),                        
		.out_empty         (),                                                  // (terminated),                        
		.in_error          (1'b0),                                              // (terminated),                        
		.out_error         (),                                                  // (terminated),                        
		.in_channel        (1'b0),                                              // (terminated),                        
		.out_channel       ()                                                   // (terminated),                        
	);

	Demo1_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (105),
		.PKT_SRC_ID_L              (104),
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (106),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (130),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) intel_niosv_m_0_timer_sw_agent_agent (
		.clk                     (clock_in_out_clk_clk),                                               //   input,    width = 1,             clk.clk
		.reset                   (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),                  //   input,    width = 1,       clk_reset.reset
		.m0_address              (intel_niosv_m_0_timer_sw_agent_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (intel_niosv_m_0_timer_sw_agent_agent_m0_burstcount),                 //  output,    width = 3,                .burstcount
		.m0_byteenable           (intel_niosv_m_0_timer_sw_agent_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (intel_niosv_m_0_timer_sw_agent_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (intel_niosv_m_0_timer_sw_agent_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (intel_niosv_m_0_timer_sw_agent_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (intel_niosv_m_0_timer_sw_agent_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (intel_niosv_m_0_timer_sw_agent_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (intel_niosv_m_0_timer_sw_agent_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (intel_niosv_m_0_timer_sw_agent_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (intel_niosv_m_0_timer_sw_agent_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (intel_niosv_m_0_timer_sw_agent_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (intel_niosv_m_0_timer_sw_agent_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (intel_niosv_m_0_timer_sw_agent_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (intel_niosv_m_0_timer_sw_agent_agent_rp_data),                       //  output,  width = 130,                .data
		.rp_startofpacket        (intel_niosv_m_0_timer_sw_agent_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (intel_niosv_m_0_timer_sw_agent_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (intel_niosv_m_0_timer_sw_agent_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (intel_niosv_m_0_timer_sw_agent_burst_adapter_source0_data),          //   input,  width = 130,                .data
		.cp_startofpacket        (intel_niosv_m_0_timer_sw_agent_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (intel_niosv_m_0_timer_sw_agent_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (intel_niosv_m_0_timer_sw_agent_burst_adapter_source0_channel),       //   input,    width = 4,                .channel
		.rf_sink_ready           (intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo_out_data),             //   input,  width = 131,                .data
		.rf_source_ready         (intel_niosv_m_0_timer_sw_agent_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (intel_niosv_m_0_timer_sw_agent_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (intel_niosv_m_0_timer_sw_agent_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (intel_niosv_m_0_timer_sw_agent_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (intel_niosv_m_0_timer_sw_agent_agent_rf_source_data),                //  output,  width = 131,                .data
		.rdata_fifo_sink_ready   (intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                              // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                               // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                // (terminated),                               
	);

	Demo1_altera_avalon_sc_fifo_1930_pqv24kq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (131),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                                            //   input,    width = 1,       clk.clk
		.reset             (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, clk_reset.reset
		.in_data           (intel_niosv_m_0_timer_sw_agent_agent_rf_source_data),             //   input,  width = 131,        in.data
		.in_valid          (intel_niosv_m_0_timer_sw_agent_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (intel_niosv_m_0_timer_sw_agent_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (intel_niosv_m_0_timer_sw_agent_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (intel_niosv_m_0_timer_sw_agent_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo_out_data),          //  output,  width = 131,       out.data
		.out_valid         (intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated),                         
		.csr_read          (1'b0),                                                            // (terminated),                         
		.csr_write         (1'b0),                                                            // (terminated),                         
		.csr_readdata      (),                                                                // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated),                         
		.almost_full_data  (),                                                                // (terminated),                         
		.almost_empty_data (),                                                                // (terminated),                         
		.in_empty          (1'b0),                                                            // (terminated),                         
		.out_empty         (),                                                                // (terminated),                         
		.in_error          (1'b0),                                                            // (terminated),                         
		.out_error         (),                                                                // (terminated),                         
		.in_channel        (1'b0),                                                            // (terminated),                         
		.out_channel       ()                                                                 // (terminated),                         
	);

	Demo1_altera_avalon_sc_fifo_1930_pqv24kq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo (
		.clk               (clock_in_out_clk_clk),                                      //   input,   width = 1,       clk.clk
		.reset             (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),         //   input,   width = 1, clk_reset.reset
		.in_data           (intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                     // (terminated),                        
		.csr_read          (1'b0),                                                      // (terminated),                        
		.csr_write         (1'b0),                                                      // (terminated),                        
		.csr_readdata      (),                                                          // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated),                        
		.almost_full_data  (),                                                          // (terminated),                        
		.almost_empty_data (),                                                          // (terminated),                        
		.in_startofpacket  (1'b0),                                                      // (terminated),                        
		.in_endofpacket    (1'b0),                                                      // (terminated),                        
		.out_startofpacket (),                                                          // (terminated),                        
		.out_endofpacket   (),                                                          // (terminated),                        
		.in_empty          (1'b0),                                                      // (terminated),                        
		.out_empty         (),                                                          // (terminated),                        
		.in_error          (1'b0),                                                      // (terminated),                        
		.out_error         (),                                                          // (terminated),                        
		.in_channel        (1'b0),                                                      // (terminated),                        
		.out_channel       ()                                                           // (terminated),                        
	);

	Demo1_altera_merlin_router_1920_en6jvea router (
		.sink_ready         (intel_niosv_m_0_data_manager_agent_write_cp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (intel_niosv_m_0_data_manager_agent_write_cp_valid),         //   input,    width = 1,          .valid
		.sink_data          (intel_niosv_m_0_data_manager_agent_write_cp_data),          //   input,  width = 130,          .data
		.sink_startofpacket (intel_niosv_m_0_data_manager_agent_write_cp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (intel_niosv_m_0_data_manager_agent_write_cp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset              (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),         //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                          //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                                          //  output,    width = 1,          .valid
		.src_data           (router_src_data),                                           //  output,  width = 130,          .data
		.src_channel        (router_src_channel),                                        //  output,    width = 4,          .channel
		.src_startofpacket  (router_src_startofpacket),                                  //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                     //  output,    width = 1,          .endofpacket
	);

/*	Demo1_altera_merlin_router_1920_en6jvea router_001 (
		.sink_ready         (intel_niosv_m_0_data_manager_agent_read_cp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (intel_niosv_m_0_data_manager_agent_read_cp_valid),         //   input,    width = 1,          .valid
		.sink_data          (intel_niosv_m_0_data_manager_agent_read_cp_data),          //   input,  width = 130,          .data
		.sink_startofpacket (intel_niosv_m_0_data_manager_agent_read_cp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (intel_niosv_m_0_data_manager_agent_read_cp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset              (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),        //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                     //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                     //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                                      //  output,  width = 130,          .data
		.src_channel        (router_001_src_channel),                                   //  output,    width = 4,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                             //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                //  output,    width = 1,          .endofpacket
	); */

/*	Demo1_altera_merlin_router_1920_kxovaay router_002 (
		.sink_ready         (intel_niosv_m_0_instruction_manager_agent_write_cp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (intel_niosv_m_0_instruction_manager_agent_write_cp_valid),         //   input,    width = 1,          .valid
		.sink_data          (intel_niosv_m_0_instruction_manager_agent_write_cp_data),          //   input,  width = 130,          .data
		.sink_startofpacket (intel_niosv_m_0_instruction_manager_agent_write_cp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (intel_niosv_m_0_instruction_manager_agent_write_cp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                             //   input,    width = 1,       clk.clk
		.reset              (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),                //   input,    width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                                             //   input,    width = 1,       src.ready
		.src_valid          (router_002_src_valid),                                             //  output,    width = 1,          .valid
		.src_data           (router_002_src_data),                                              //  output,  width = 130,          .data
		.src_channel        (router_002_src_channel),                                           //  output,    width = 4,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                     //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                        //  output,    width = 1,          .endofpacket
	); */

/*	Demo1_altera_merlin_router_1920_kxovaay router_003 (
		.sink_ready         (intel_niosv_m_0_instruction_manager_agent_read_cp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (intel_niosv_m_0_instruction_manager_agent_read_cp_valid),         //   input,    width = 1,          .valid
		.sink_data          (intel_niosv_m_0_instruction_manager_agent_read_cp_data),          //   input,  width = 130,          .data
		.sink_startofpacket (intel_niosv_m_0_instruction_manager_agent_read_cp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (intel_niosv_m_0_instruction_manager_agent_read_cp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                            //   input,    width = 1,       clk.clk
		.reset              (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, clk_reset.reset
		.src_ready          (router_003_src_ready),                                            //   input,    width = 1,       src.ready
		.src_valid          (router_003_src_valid),                                            //  output,    width = 1,          .valid
		.src_data           (router_003_src_data),                                             //  output,  width = 130,          .data
		.src_channel        (router_003_src_channel),                                          //  output,    width = 4,          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                    //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                       //  output,    width = 1,          .endofpacket
	); */

/*	Demo1_altera_merlin_router_1920_7io6p2i router_004 (
		.sink_ready         (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (jtag_uart_0_avalon_jtag_slave_agent_rp_data),          //   input,  width = 130,          .data
		.sink_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                 //   input,    width = 1,       clk.clk
		.reset              (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),    //   input,    width = 1, clk_reset.reset
		.src_ready          (router_004_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid          (router_004_src_valid),                                 //  output,    width = 1,          .valid
		.src_data           (router_004_src_data),                                  //  output,  width = 130,          .data
		.src_channel        (router_004_src_channel),                               //  output,    width = 4,          .channel
		.src_startofpacket  (router_004_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                            //  output,    width = 1,          .endofpacket
	); */

	Demo1_altera_merlin_router_1920_gvsv73q router_005 (
		.sink_ready         (intel_niosv_m_0_dm_agent_agent_rp_ready),           //  output,    width = 1,      sink.ready
		.sink_valid         (intel_niosv_m_0_dm_agent_agent_rp_valid),           //   input,    width = 1,          .valid
		.sink_data          (intel_niosv_m_0_dm_agent_agent_rp_data),            //   input,  width = 130,          .data
		.sink_startofpacket (intel_niosv_m_0_dm_agent_agent_rp_startofpacket),   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (intel_niosv_m_0_dm_agent_agent_rp_endofpacket),     //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                              //   input,    width = 1,       clk.clk
		.reset              (intel_niosv_m_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_005_src_ready),                              //   input,    width = 1,       src.ready
		.src_valid          (router_005_src_valid),                              //  output,    width = 1,          .valid
		.src_data           (router_005_src_data),                               //  output,  width = 130,          .data
		.src_channel        (router_005_src_channel),                            //  output,    width = 4,          .channel
		.src_startofpacket  (router_005_src_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	Demo1_altera_merlin_router_1920_gvsv73q router_006 (
		.sink_ready         (onchip_memory2_0_s1_agent_rp_ready),                //  output,    width = 1,      sink.ready
		.sink_valid         (onchip_memory2_0_s1_agent_rp_valid),                //   input,    width = 1,          .valid
		.sink_data          (onchip_memory2_0_s1_agent_rp_data),                 //   input,  width = 130,          .data
		.sink_startofpacket (onchip_memory2_0_s1_agent_rp_startofpacket),        //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (onchip_memory2_0_s1_agent_rp_endofpacket),          //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                              //   input,    width = 1,       clk.clk
		.reset              (intel_niosv_m_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_006_src_ready),                              //   input,    width = 1,       src.ready
		.src_valid          (router_006_src_valid),                              //  output,    width = 1,          .valid
		.src_data           (router_006_src_data),                               //  output,  width = 130,          .data
		.src_channel        (router_006_src_channel),                            //  output,    width = 4,          .channel
		.src_startofpacket  (router_006_src_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

/*	Demo1_altera_merlin_router_1920_7io6p2i router_007 (
		.sink_ready         (intel_niosv_m_0_timer_sw_agent_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (intel_niosv_m_0_timer_sw_agent_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (intel_niosv_m_0_timer_sw_agent_agent_rp_data),          //   input,  width = 130,          .data
		.sink_startofpacket (intel_niosv_m_0_timer_sw_agent_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (intel_niosv_m_0_timer_sw_agent_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),     //   input,    width = 1, clk_reset.reset
		.src_ready          (router_007_src_ready),                                  //   input,    width = 1,       src.ready
		.src_valid          (router_007_src_valid),                                  //  output,    width = 1,          .valid
		.src_data           (router_007_src_data),                                   //  output,  width = 130,          .data
		.src_channel        (router_007_src_channel),                                //  output,    width = 4,          .channel
		.src_startofpacket  (router_007_src_startofpacket),                          //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                             //  output,    width = 1,          .endofpacket
	); */

//.............Appending output..............//
/* Printing wires     */
wire cb_in_router_0_out0;
wire cb_in_router_0_out1;
wire cb_in_router_0_out2;
wire cb_in_router_0_out3;
wire [0:5] cb_in_router_0_sel;


/* Printing wires     */
wire cb_out_router_0_in0;
wire cb_out_router_0_in1;
wire cb_out_router_0_in2;
wire cb_out_router_0_in3;
wire [0:5] cb_out_router_0_sel;


Demo1_altera_merlin_router_1920_en6jvea router_001 (
	 .sink_valid(cb_in_router_0_out0),
	 .sink_startofpacket(cb_in_router_0_out1),
	 .sink_endofpacket(cb_in_router_0_out2),
	 .src_ready(cb_in_router_0_out3),
	 .sink_ready(cb_out_router_0_in0),
	 .src_valid(cb_out_router_0_in1),
	 .src_startofpacket(cb_out_router_0_in2),
	 .src_endofpacket(cb_out_router_0_in3),
	 .sink_data(intel_niosv_m_0_data_manager_agent_read_cp_data),
	 .clk(clock_in_out_clk_clk),
	 .reset(intel_niosv_m_0_reset_reset_bridge_in_reset_reset),
	 .src_data(router_001_src_data),
	 .src_channel(router_001_src_channel)
);


crbar4x4 cb_in_router_0 (
	 .in0(intel_niosv_m_0_data_manager_agent_read_cp_startofpacket),
	 .in1(intel_niosv_m_0_data_manager_agent_read_cp_endofpacket),
	 .in2(router_001_src_ready),
	 .in3(intel_niosv_m_0_data_manager_agent_read_cp_valid),
	 .out0(cb_in_router_0_out0),
	 .out1(cb_in_router_0_out1),
	 .out2(cb_in_router_0_out2),
	 .out3(cb_in_router_0_out3),
	 .sel0(cb_in_router_0_sel)
);


crbar4x4 cb_out_router_0 (
	 .in0(cb_out_router_0_in0),
	 .in1(cb_out_router_0_in1),
	 .in2(cb_out_router_0_in2),
	 .in3(cb_out_router_0_in3),
	 .out0(sink_ready),
	 .out1(src_valid),
	 .out2(src_startofpacket),
	 .out3(src_endofpacket),
	 .sel0(cb_out_router_0_sel)
);


/* Printing wires     */
wire cb_in_router_1_out0;
wire cb_in_router_1_out1;
wire cb_in_router_1_out2;
wire cb_in_router_1_out3;
wire [0:5] cb_in_router_1_sel;


/* Printing wires     */
wire cb_out_router_1_in0;
wire cb_out_router_1_in1;
wire cb_out_router_1_in2;
wire cb_out_router_1_in3;
wire [0:5] cb_out_router_1_sel;


Demo1_altera_merlin_router_1920_kxovaay router_002 (
	 .sink_valid(cb_in_router_1_out0),
	 .sink_startofpacket(cb_in_router_1_out1),
	 .sink_endofpacket(cb_in_router_1_out2),
	 .src_ready(cb_in_router_1_out3),
	 .sink_ready(cb_out_router_1_in0),
	 .src_valid(cb_out_router_1_in1),
	 .src_startofpacket(cb_out_router_1_in2),
	 .src_endofpacket(cb_out_router_1_in3),
	 .sink_data(intel_niosv_m_0_instruction_manager_agent_write_cp_data),
	 .clk(clock_in_out_clk_clk),
	 .reset(intel_niosv_m_0_reset_reset_bridge_in_reset_reset),
	 .src_data(router_002_src_data),
	 .src_channel(router_002_src_channel)
);


crbar4x4 cb_in_router_1 (
	 .in0(intel_niosv_m_0_instruction_manager_agent_write_cp_startofpacket),
	 .in1(router_002_src_ready),
	 .in2(intel_niosv_m_0_instruction_manager_agent_write_cp_endofpacket),
	 .in3(intel_niosv_m_0_instruction_manager_agent_write_cp_valid),
	 .out0(cb_in_router_1_out0),
	 .out1(cb_in_router_1_out1),
	 .out2(cb_in_router_1_out2),
	 .out3(cb_in_router_1_out3),
	 .sel0(cb_in_router_1_sel)
);


crbar4x4 cb_out_router_1 (
	 .in0(cb_out_router_1_in0),
	 .in1(cb_out_router_1_in1),
	 .in2(cb_out_router_1_in2),
	 .in3(cb_out_router_1_in3),
	 .out0(sink_ready),
	 .out1(src_valid),
	 .out2(src_startofpacket),
	 .out3(src_endofpacket),
	 .sel0(cb_out_router_1_sel)
);


/* Printing wires     */
wire cb_in_router_2_out0;
wire cb_in_router_2_out1;
wire cb_in_router_2_out2;
wire cb_in_router_2_out3;
wire [0:5] cb_in_router_2_sel;


/* Printing wires     */
wire cb_out_router_2_in0;
wire cb_out_router_2_in1;
wire cb_out_router_2_in2;
wire cb_out_router_2_in3;
wire [0:5] cb_out_router_2_sel;


Demo1_altera_merlin_router_1920_kxovaay router_003 (
	 .sink_valid(cb_in_router_2_out0),
	 .sink_startofpacket(cb_in_router_2_out1),
	 .sink_endofpacket(cb_in_router_2_out2),
	 .src_ready(cb_in_router_2_out3),
	 .sink_ready(cb_out_router_2_in0),
	 .src_valid(cb_out_router_2_in1),
	 .src_startofpacket(cb_out_router_2_in2),
	 .src_endofpacket(cb_out_router_2_in3),
	 .sink_data(intel_niosv_m_0_instruction_manager_agent_read_cp_data),
	 .clk(clock_in_out_clk_clk),
	 .reset(intel_niosv_m_0_reset_reset_bridge_in_reset_reset),
	 .src_data(router_003_src_data),
	 .src_channel(router_003_src_channel)
);


crbar4x4 cb_in_router_2 (
	 .in0(intel_niosv_m_0_instruction_manager_agent_read_cp_startofpacket),
	 .in1(router_003_src_ready),
	 .in2(intel_niosv_m_0_instruction_manager_agent_read_cp_valid),
	 .in3(intel_niosv_m_0_instruction_manager_agent_read_cp_endofpacket),
	 .out0(cb_in_router_2_out0),
	 .out1(cb_in_router_2_out1),
	 .out2(cb_in_router_2_out2),
	 .out3(cb_in_router_2_out3),
	 .sel0(cb_in_router_2_sel)
);


crbar4x4 cb_out_router_2 (
	 .in0(cb_out_router_2_in0),
	 .in1(cb_out_router_2_in1),
	 .in2(cb_out_router_2_in2),
	 .in3(cb_out_router_2_in3),
	 .out0(sink_ready),
	 .out1(src_valid),
	 .out2(src_startofpacket),
	 .out3(src_endofpacket),
	 .sel0(cb_out_router_2_sel)
);


/* Printing wires     */
wire cb_in_router_3_out0;
wire cb_in_router_3_out1;
wire cb_in_router_3_out2;
wire cb_in_router_3_out3;
wire [0:5] cb_in_router_3_sel;


/* Printing wires     */
wire cb_out_router_3_in0;
wire cb_out_router_3_in1;
wire cb_out_router_3_in2;
wire cb_out_router_3_in3;
wire [0:5] cb_out_router_3_sel;


Demo1_altera_merlin_router_1920_7io6p2i router_007 (
	 .sink_valid(cb_in_router_3_out0),
	 .sink_startofpacket(cb_in_router_3_out1),
	 .sink_endofpacket(cb_in_router_3_out2),
	 .src_ready(cb_in_router_3_out3),
	 .sink_ready(cb_out_router_3_in0),
	 .src_valid(cb_out_router_3_in1),
	 .src_startofpacket(cb_out_router_3_in2),
	 .src_endofpacket(cb_out_router_3_in3),
	 .sink_data(intel_niosv_m_0_timer_sw_agent_agent_rp_data),
	 .clk(clock_in_out_clk_clk),
	 .reset(intel_niosv_m_0_reset_reset_bridge_in_reset_reset),
	 .src_data(router_007_src_data),
	 .src_channel(router_007_src_channel)
);


crbar4x4 cb_in_router_3 (
	 .in0(intel_niosv_m_0_timer_sw_agent_agent_rp_startofpacket),
	 .in1(intel_niosv_m_0_timer_sw_agent_agent_rp_valid),
	 .in2(intel_niosv_m_0_timer_sw_agent_agent_rp_endofpacket),
	 .in3(router_007_src_ready),
	 .out0(cb_in_router_3_out0),
	 .out1(cb_in_router_3_out1),
	 .out2(cb_in_router_3_out2),
	 .out3(cb_in_router_3_out3),
	 .sel0(cb_in_router_3_sel)
);


crbar4x4 cb_out_router_3 (
	 .in0(cb_out_router_3_in0),
	 .in1(cb_out_router_3_in1),
	 .in2(cb_out_router_3_in2),
	 .in3(cb_out_router_3_in3),
	 .out0(sink_ready),
	 .out1(src_valid),
	 .out2(src_startofpacket),
	 .out3(src_endofpacket),
	 .sel0(cb_out_router_3_sel)
);


/* Printing wires     */
wire cb_in_router_4_out0;
wire cb_in_router_4_out1;
wire cb_in_router_4_out2;
wire cb_in_router_4_out3;
wire [0:5] cb_in_router_4_sel;


/* Printing wires     */
wire cb_out_router_4_in0;
wire cb_out_router_4_in1;
wire cb_out_router_4_in2;
wire cb_out_router_4_in3;
wire [0:5] cb_out_router_4_sel;


Demo1_altera_merlin_router_1920_7io6p2i router_004 (
	 .sink_valid(cb_in_router_4_out0),
	 .sink_startofpacket(cb_in_router_4_out1),
	 .sink_endofpacket(cb_in_router_4_out2),
	 .src_ready(cb_in_router_4_out3),
	 .sink_ready(cb_out_router_4_in0),
	 .src_valid(cb_out_router_4_in1),
	 .src_startofpacket(cb_out_router_4_in2),
	 .src_endofpacket(cb_out_router_4_in3),
	 .sink_data(jtag_uart_0_avalon_jtag_slave_agent_rp_data),
	 .clk(clock_in_out_clk_clk),
	 .reset(intel_niosv_m_0_reset_reset_bridge_in_reset_reset),
	 .src_data(router_004_src_data),
	 .src_channel(router_004_src_channel)
);


crbar4x4 cb_in_router_4 (
	 .in0(jtag_uart_0_avalon_jtag_slave_agent_rp_valid),
	 .in1(jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),
	 .in2(jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket),
	 .in3(router_004_src_ready),
	 .out0(cb_in_router_4_out0),
	 .out1(cb_in_router_4_out1),
	 .out2(cb_in_router_4_out2),
	 .out3(cb_in_router_4_out3),
	 .sel0(cb_in_router_4_sel)
);


crbar4x4 cb_out_router_4 (
	 .in0(cb_out_router_4_in0),
	 .in1(cb_out_router_4_in1),
	 .in2(cb_out_router_4_in2),
	 .in3(cb_out_router_4_in3),
	 .out0(sink_ready),
	 .out1(src_valid),
	 .out2(src_startofpacket),
	 .out3(src_endofpacket),
	 .sel0(cb_out_router_4_sel)
);


wire [59:0] select_lines;

assign cb_in_router_0_sel = select_lines[5:0];
assign cb_out_router_0_sel = select_lines[11:6];
assign cb_in_router_1_sel = select_lines[17:12];
assign cb_out_router_1_sel = select_lines[23:18];
assign cb_in_router_2_sel = select_lines[29:24];
assign cb_out_router_2_sel = select_lines[35:30];
assign cb_in_router_3_sel = select_lines[41:36];
assign cb_out_router_3_sel = select_lines[47:42];
assign cb_in_router_4_sel = select_lines[53:48];
assign cb_out_router_4_sel = select_lines[59:54];

activation_package_n_bit act1 (
	.clk(clock_in_out_clk_clk),
	.reset(intel_niosv_m_0_reset_reset_bridge_in_reset_reset),
	.serial_in(serial_in),
	.parallel_out(select_lines)
);
//.............Appending output Done..............//

	Demo1_altera_merlin_traffic_limiter_191_kcba44q #(
		.SYNC_RESET                (0),
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (106),
		.PKT_SRC_ID_H              (105),
		.PKT_SRC_ID_L              (104),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (2),
		.PIPELINED                 (0),
		.ST_DATA_W                 (130),
		.ST_CHANNEL_W              (4),
		.VALID_WIDTH               (4),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) intel_niosv_m_0_instruction_manager_wr_limiter (
		.clk                    (clock_in_out_clk_clk),                                                 //   input,    width = 1,       clk.clk
		.reset                  (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),                    //   input,    width = 1, clk_reset.reset
		.cmd_sink_ready         (router_002_src_ready),                                                 //  output,    width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_002_src_valid),                                                 //   input,    width = 1,          .valid
		.cmd_sink_data          (router_002_src_data),                                                  //   input,  width = 130,          .data
		.cmd_sink_channel       (router_002_src_channel),                                               //   input,    width = 4,          .channel
		.cmd_sink_startofpacket (router_002_src_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_002_src_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.cmd_src_ready          (intel_niosv_m_0_instruction_manager_wr_limiter_cmd_src_ready),         //   input,    width = 1,   cmd_src.ready
		.cmd_src_data           (intel_niosv_m_0_instruction_manager_wr_limiter_cmd_src_data),          //  output,  width = 130,          .data
		.cmd_src_channel        (intel_niosv_m_0_instruction_manager_wr_limiter_cmd_src_channel),       //  output,    width = 4,          .channel
		.cmd_src_startofpacket  (intel_niosv_m_0_instruction_manager_wr_limiter_cmd_src_startofpacket), //  output,    width = 1,          .startofpacket
		.cmd_src_endofpacket    (intel_niosv_m_0_instruction_manager_wr_limiter_cmd_src_endofpacket),   //  output,    width = 1,          .endofpacket
		.rsp_sink_ready         (rsp_mux_002_src_ready),                                                //  output,    width = 1,  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_002_src_valid),                                                //   input,    width = 1,          .valid
		.rsp_sink_channel       (rsp_mux_002_src_channel),                                              //   input,    width = 4,          .channel
		.rsp_sink_data          (rsp_mux_002_src_data),                                                 //   input,  width = 130,          .data
		.rsp_sink_startofpacket (rsp_mux_002_src_startofpacket),                                        //   input,    width = 1,          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_002_src_endofpacket),                                          //   input,    width = 1,          .endofpacket
		.rsp_src_ready          (intel_niosv_m_0_instruction_manager_wr_limiter_rsp_src_ready),         //   input,    width = 1,   rsp_src.ready
		.rsp_src_valid          (intel_niosv_m_0_instruction_manager_wr_limiter_rsp_src_valid),         //  output,    width = 1,          .valid
		.rsp_src_data           (intel_niosv_m_0_instruction_manager_wr_limiter_rsp_src_data),          //  output,  width = 130,          .data
		.rsp_src_channel        (intel_niosv_m_0_instruction_manager_wr_limiter_rsp_src_channel),       //  output,    width = 4,          .channel
		.rsp_src_startofpacket  (intel_niosv_m_0_instruction_manager_wr_limiter_rsp_src_startofpacket), //  output,    width = 1,          .startofpacket
		.rsp_src_endofpacket    (intel_niosv_m_0_instruction_manager_wr_limiter_rsp_src_endofpacket),   //  output,    width = 1,          .endofpacket
		.cmd_src_valid          (intel_niosv_m_0_instruction_manager_wr_limiter_cmd_valid_data)         //  output,    width = 4, cmd_valid.data
	);

	Demo1_altera_merlin_traffic_limiter_191_kcba44q #(
		.SYNC_RESET                (0),
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (106),
		.PKT_SRC_ID_H              (105),
		.PKT_SRC_ID_L              (104),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (2),
		.PIPELINED                 (0),
		.ST_DATA_W                 (130),
		.ST_CHANNEL_W              (4),
		.VALID_WIDTH               (4),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) intel_niosv_m_0_instruction_manager_rd_limiter (
		.clk                    (clock_in_out_clk_clk),                                                 //   input,    width = 1,       clk.clk
		.reset                  (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),                    //   input,    width = 1, clk_reset.reset
		.cmd_sink_ready         (router_003_src_ready),                                                 //  output,    width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_003_src_valid),                                                 //   input,    width = 1,          .valid
		.cmd_sink_data          (router_003_src_data),                                                  //   input,  width = 130,          .data
		.cmd_sink_channel       (router_003_src_channel),                                               //   input,    width = 4,          .channel
		.cmd_sink_startofpacket (router_003_src_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_003_src_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.cmd_src_ready          (intel_niosv_m_0_instruction_manager_rd_limiter_cmd_src_ready),         //   input,    width = 1,   cmd_src.ready
		.cmd_src_data           (intel_niosv_m_0_instruction_manager_rd_limiter_cmd_src_data),          //  output,  width = 130,          .data
		.cmd_src_channel        (intel_niosv_m_0_instruction_manager_rd_limiter_cmd_src_channel),       //  output,    width = 4,          .channel
		.cmd_src_startofpacket  (intel_niosv_m_0_instruction_manager_rd_limiter_cmd_src_startofpacket), //  output,    width = 1,          .startofpacket
		.cmd_src_endofpacket    (intel_niosv_m_0_instruction_manager_rd_limiter_cmd_src_endofpacket),   //  output,    width = 1,          .endofpacket
		.rsp_sink_ready         (rsp_mux_003_src_ready),                                                //  output,    width = 1,  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_003_src_valid),                                                //   input,    width = 1,          .valid
		.rsp_sink_channel       (rsp_mux_003_src_channel),                                              //   input,    width = 4,          .channel
		.rsp_sink_data          (rsp_mux_003_src_data),                                                 //   input,  width = 130,          .data
		.rsp_sink_startofpacket (rsp_mux_003_src_startofpacket),                                        //   input,    width = 1,          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_003_src_endofpacket),                                          //   input,    width = 1,          .endofpacket
		.rsp_src_ready          (intel_niosv_m_0_instruction_manager_rd_limiter_rsp_src_ready),         //   input,    width = 1,   rsp_src.ready
		.rsp_src_valid          (intel_niosv_m_0_instruction_manager_rd_limiter_rsp_src_valid),         //  output,    width = 1,          .valid
		.rsp_src_data           (intel_niosv_m_0_instruction_manager_rd_limiter_rsp_src_data),          //  output,  width = 130,          .data
		.rsp_src_channel        (intel_niosv_m_0_instruction_manager_rd_limiter_rsp_src_channel),       //  output,    width = 4,          .channel
		.rsp_src_startofpacket  (intel_niosv_m_0_instruction_manager_rd_limiter_rsp_src_startofpacket), //  output,    width = 1,          .startofpacket
		.rsp_src_endofpacket    (intel_niosv_m_0_instruction_manager_rd_limiter_rsp_src_endofpacket),   //  output,    width = 1,          .endofpacket
		.cmd_src_valid          (intel_niosv_m_0_instruction_manager_rd_limiter_cmd_valid_data)         //  output,    width = 4, cmd_valid.data
	);

	Demo1_altera_merlin_burst_adapter_1921_4uwmfpq #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (85),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (130),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) jtag_uart_0_avalon_jtag_slave_burst_adapter (
		.clk                   (clock_in_out_clk_clk),                                              //   input,    width = 1,       cr0.clk
		.reset                 (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),                 //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                                 //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                                  //   input,  width = 130,          .data
		.sink0_channel         (cmd_mux_src_channel),                                               //   input,    width = 4,          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                                 //  output,    width = 1,          .ready
		.source0_valid         (jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_data),          //  output,  width = 130,          .data
		.source0_channel       (jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_channel),       //  output,    width = 4,          .channel
		.source0_startofpacket (jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	Demo1_altera_merlin_burst_adapter_1921_4uwmfpq #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (85),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (130),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) intel_niosv_m_0_dm_agent_burst_adapter (
		.clk                   (clock_in_out_clk_clk),                                         //   input,    width = 1,       cr0.clk
		.reset                 (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),            //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                                        //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                                         //   input,  width = 130,          .data
		.sink0_channel         (cmd_mux_001_src_channel),                                      //   input,    width = 4,          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                                        //  output,    width = 1,          .ready
		.source0_valid         (intel_niosv_m_0_dm_agent_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (intel_niosv_m_0_dm_agent_burst_adapter_source0_data),          //  output,  width = 130,          .data
		.source0_channel       (intel_niosv_m_0_dm_agent_burst_adapter_source0_channel),       //  output,    width = 4,          .channel
		.source0_startofpacket (intel_niosv_m_0_dm_agent_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (intel_niosv_m_0_dm_agent_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (intel_niosv_m_0_dm_agent_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	Demo1_altera_merlin_burst_adapter_1921_4uwmfpq #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (85),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (130),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) onchip_memory2_0_s1_burst_adapter (
		.clk                   (clock_in_out_clk_clk),                                    //   input,    width = 1,       cr0.clk
		.reset                 (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),       //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                                   //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                                    //   input,  width = 130,          .data
		.sink0_channel         (cmd_mux_002_src_channel),                                 //   input,    width = 4,          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                           //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                             //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                                   //  output,    width = 1,          .ready
		.source0_valid         (onchip_memory2_0_s1_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (onchip_memory2_0_s1_burst_adapter_source0_data),          //  output,  width = 130,          .data
		.source0_channel       (onchip_memory2_0_s1_burst_adapter_source0_channel),       //  output,    width = 4,          .channel
		.source0_startofpacket (onchip_memory2_0_s1_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (onchip_memory2_0_s1_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (onchip_memory2_0_s1_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	Demo1_altera_merlin_burst_adapter_1921_4uwmfpq #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (85),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (130),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) intel_niosv_m_0_timer_sw_agent_burst_adapter (
		.clk                   (clock_in_out_clk_clk),                                               //   input,    width = 1,       cr0.clk
		.reset                 (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),                  //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_003_src_valid),                                              //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_003_src_data),                                               //   input,  width = 130,          .data
		.sink0_channel         (cmd_mux_003_src_channel),                                            //   input,    width = 4,          .channel
		.sink0_startofpacket   (cmd_mux_003_src_startofpacket),                                      //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_003_src_endofpacket),                                        //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_003_src_ready),                                              //  output,    width = 1,          .ready
		.source0_valid         (intel_niosv_m_0_timer_sw_agent_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (intel_niosv_m_0_timer_sw_agent_burst_adapter_source0_data),          //  output,  width = 130,          .data
		.source0_channel       (intel_niosv_m_0_timer_sw_agent_burst_adapter_source0_channel),       //  output,    width = 4,          .channel
		.source0_startofpacket (intel_niosv_m_0_timer_sw_agent_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (intel_niosv_m_0_timer_sw_agent_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (intel_niosv_m_0_timer_sw_agent_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	Demo1_altera_merlin_demultiplexer_1921_fjlmjay cmd_demux (
		.clk                (clock_in_out_clk_clk),                              //   input,    width = 1,       clk.clk
		.reset              (intel_niosv_m_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_src_ready),                                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_src_channel),                                //   input,    width = 4,          .channel
		.sink_data          (router_src_data),                                   //   input,  width = 130,          .data
		.sink_startofpacket (router_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_src_valid),                                  //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_src0_ready),                              //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                              //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_src0_data),                               //  output,  width = 130,          .data
		.src0_channel       (cmd_demux_src0_channel),                            //  output,    width = 4,          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                        //  output,    width = 1,          .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                              //   input,    width = 1,      src1.ready
		.src1_valid         (cmd_demux_src1_valid),                              //  output,    width = 1,          .valid
		.src1_data          (cmd_demux_src1_data),                               //  output,  width = 130,          .data
		.src1_channel       (cmd_demux_src1_channel),                            //  output,    width = 4,          .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                        //  output,    width = 1,          .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                              //   input,    width = 1,      src2.ready
		.src2_valid         (cmd_demux_src2_valid),                              //  output,    width = 1,          .valid
		.src2_data          (cmd_demux_src2_data),                               //  output,  width = 130,          .data
		.src2_channel       (cmd_demux_src2_channel),                            //  output,    width = 4,          .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                        //  output,    width = 1,          .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                              //   input,    width = 1,      src3.ready
		.src3_valid         (cmd_demux_src3_valid),                              //  output,    width = 1,          .valid
		.src3_data          (cmd_demux_src3_data),                               //  output,  width = 130,          .data
		.src3_channel       (cmd_demux_src3_channel),                            //  output,    width = 4,          .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	Demo1_altera_merlin_demultiplexer_1921_fjlmjay cmd_demux_001 (
		.clk                (clock_in_out_clk_clk),                              //   input,    width = 1,       clk.clk
		.reset              (intel_niosv_m_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_001_src_ready),                              //  output,    width = 1,      sink.ready
		.sink_channel       (router_001_src_channel),                            //   input,    width = 4,          .channel
		.sink_data          (router_001_src_data),                               //   input,  width = 130,          .data
		.sink_startofpacket (router_001_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink_valid         (router_001_src_valid),                              //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                          //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                          //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_001_src0_data),                           //  output,  width = 130,          .data
		.src0_channel       (cmd_demux_001_src0_channel),                        //  output,    width = 4,          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                    //  output,    width = 1,          .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                          //   input,    width = 1,      src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                          //  output,    width = 1,          .valid
		.src1_data          (cmd_demux_001_src1_data),                           //  output,  width = 130,          .data
		.src1_channel       (cmd_demux_001_src1_channel),                        //  output,    width = 4,          .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                    //  output,    width = 1,          .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                          //   input,    width = 1,      src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                          //  output,    width = 1,          .valid
		.src2_data          (cmd_demux_001_src2_data),                           //  output,  width = 130,          .data
		.src2_channel       (cmd_demux_001_src2_channel),                        //  output,    width = 4,          .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),                    //  output,    width = 1,          .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                          //   input,    width = 1,      src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                          //  output,    width = 1,          .valid
		.src3_data          (cmd_demux_001_src3_data),                           //  output,  width = 130,          .data
		.src3_channel       (cmd_demux_001_src3_channel),                        //  output,    width = 4,          .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket)                     //  output,    width = 1,          .endofpacket
	);

	Demo1_altera_merlin_demultiplexer_1921_cdrhr5i cmd_demux_002 (
		.clk                (clock_in_out_clk_clk),                                                 //   input,    width = 1,        clk.clk
		.reset              (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),                    //   input,    width = 1,  clk_reset.reset
		.sink_ready         (intel_niosv_m_0_instruction_manager_wr_limiter_cmd_src_ready),         //  output,    width = 1,       sink.ready
		.sink_channel       (intel_niosv_m_0_instruction_manager_wr_limiter_cmd_src_channel),       //   input,    width = 4,           .channel
		.sink_data          (intel_niosv_m_0_instruction_manager_wr_limiter_cmd_src_data),          //   input,  width = 130,           .data
		.sink_startofpacket (intel_niosv_m_0_instruction_manager_wr_limiter_cmd_src_startofpacket), //   input,    width = 1,           .startofpacket
		.sink_endofpacket   (intel_niosv_m_0_instruction_manager_wr_limiter_cmd_src_endofpacket),   //   input,    width = 1,           .endofpacket
		.sink_valid         (intel_niosv_m_0_instruction_manager_wr_limiter_cmd_valid_data),        //   input,    width = 4, sink_valid.data
		.src0_ready         (cmd_demux_002_src0_ready),                                             //   input,    width = 1,       src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                                             //  output,    width = 1,           .valid
		.src0_data          (cmd_demux_002_src0_data),                                              //  output,  width = 130,           .data
		.src0_channel       (cmd_demux_002_src0_channel),                                           //  output,    width = 4,           .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                                     //  output,    width = 1,           .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket),                                       //  output,    width = 1,           .endofpacket
		.src1_ready         (cmd_demux_002_src1_ready),                                             //   input,    width = 1,       src1.ready
		.src1_valid         (cmd_demux_002_src1_valid),                                             //  output,    width = 1,           .valid
		.src1_data          (cmd_demux_002_src1_data),                                              //  output,  width = 130,           .data
		.src1_channel       (cmd_demux_002_src1_channel),                                           //  output,    width = 4,           .channel
		.src1_startofpacket (cmd_demux_002_src1_startofpacket),                                     //  output,    width = 1,           .startofpacket
		.src1_endofpacket   (cmd_demux_002_src1_endofpacket)                                        //  output,    width = 1,           .endofpacket
	);

	Demo1_altera_merlin_demultiplexer_1921_cdrhr5i cmd_demux_003 (
		.clk                (clock_in_out_clk_clk),                                                 //   input,    width = 1,        clk.clk
		.reset              (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),                    //   input,    width = 1,  clk_reset.reset
		.sink_ready         (intel_niosv_m_0_instruction_manager_rd_limiter_cmd_src_ready),         //  output,    width = 1,       sink.ready
		.sink_channel       (intel_niosv_m_0_instruction_manager_rd_limiter_cmd_src_channel),       //   input,    width = 4,           .channel
		.sink_data          (intel_niosv_m_0_instruction_manager_rd_limiter_cmd_src_data),          //   input,  width = 130,           .data
		.sink_startofpacket (intel_niosv_m_0_instruction_manager_rd_limiter_cmd_src_startofpacket), //   input,    width = 1,           .startofpacket
		.sink_endofpacket   (intel_niosv_m_0_instruction_manager_rd_limiter_cmd_src_endofpacket),   //   input,    width = 1,           .endofpacket
		.sink_valid         (intel_niosv_m_0_instruction_manager_rd_limiter_cmd_valid_data),        //   input,    width = 4, sink_valid.data
		.src0_ready         (cmd_demux_003_src0_ready),                                             //   input,    width = 1,       src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                                             //  output,    width = 1,           .valid
		.src0_data          (cmd_demux_003_src0_data),                                              //  output,  width = 130,           .data
		.src0_channel       (cmd_demux_003_src0_channel),                                           //  output,    width = 4,           .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),                                     //  output,    width = 1,           .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket),                                       //  output,    width = 1,           .endofpacket
		.src1_ready         (cmd_demux_003_src1_ready),                                             //   input,    width = 1,       src1.ready
		.src1_valid         (cmd_demux_003_src1_valid),                                             //  output,    width = 1,           .valid
		.src1_data          (cmd_demux_003_src1_data),                                              //  output,  width = 130,           .data
		.src1_channel       (cmd_demux_003_src1_channel),                                           //  output,    width = 4,           .channel
		.src1_startofpacket (cmd_demux_003_src1_startofpacket),                                     //  output,    width = 1,           .startofpacket
		.src1_endofpacket   (cmd_demux_003_src1_endofpacket)                                        //  output,    width = 1,           .endofpacket
	);

	Demo1_altera_merlin_multiplexer_1921_dkfuzfa cmd_mux (
		.clk                 (clock_in_out_clk_clk),                              //   input,    width = 1,       clk.clk
		.reset               (intel_niosv_m_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                                  //  output,  width = 130,          .data
		.src_channel         (cmd_mux_src_channel),                               //  output,    width = 4,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                              //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                              //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src0_channel),                            //   input,    width = 4,          .channel
		.sink0_data          (cmd_demux_src0_data),                               //   input,  width = 130,          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                          //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                          //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                        //   input,    width = 4,          .channel
		.sink1_data          (cmd_demux_001_src0_data),                           //   input,  width = 130,          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	Demo1_altera_merlin_multiplexer_1921_t4lheaa cmd_mux_001 (
		.clk                 (clock_in_out_clk_clk),                              //   input,    width = 1,       clk.clk
		.reset               (intel_niosv_m_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                             //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_001_src_valid),                             //  output,    width = 1,          .valid
		.src_data            (cmd_mux_001_src_data),                              //  output,  width = 130,          .data
		.src_channel         (cmd_mux_001_src_channel),                           //  output,    width = 4,          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                     //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                       //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                              //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                              //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src1_channel),                            //   input,    width = 4,          .channel
		.sink0_data          (cmd_demux_src1_data),                               //   input,  width = 130,          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                          //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                          //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                        //   input,    width = 4,          .channel
		.sink1_data          (cmd_demux_001_src1_data),                           //   input,  width = 130,          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket),                    //   input,    width = 1,          .endofpacket
		.sink2_ready         (cmd_demux_002_src0_ready),                          //  output,    width = 1,     sink2.ready
		.sink2_valid         (cmd_demux_002_src0_valid),                          //   input,    width = 1,          .valid
		.sink2_channel       (cmd_demux_002_src0_channel),                        //   input,    width = 4,          .channel
		.sink2_data          (cmd_demux_002_src0_data),                           //   input,  width = 130,          .data
		.sink2_startofpacket (cmd_demux_002_src0_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src0_endofpacket),                    //   input,    width = 1,          .endofpacket
		.sink3_ready         (cmd_demux_003_src0_ready),                          //  output,    width = 1,     sink3.ready
		.sink3_valid         (cmd_demux_003_src0_valid),                          //   input,    width = 1,          .valid
		.sink3_channel       (cmd_demux_003_src0_channel),                        //   input,    width = 4,          .channel
		.sink3_data          (cmd_demux_003_src0_data),                           //   input,  width = 130,          .data
		.sink3_startofpacket (cmd_demux_003_src0_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src0_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	Demo1_altera_merlin_multiplexer_1921_t4lheaa cmd_mux_002 (
		.clk                 (clock_in_out_clk_clk),                              //   input,    width = 1,       clk.clk
		.reset               (intel_niosv_m_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                             //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_002_src_valid),                             //  output,    width = 1,          .valid
		.src_data            (cmd_mux_002_src_data),                              //  output,  width = 130,          .data
		.src_channel         (cmd_mux_002_src_channel),                           //  output,    width = 4,          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                     //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                       //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                              //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                              //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src2_channel),                            //   input,    width = 4,          .channel
		.sink0_data          (cmd_demux_src2_data),                               //   input,  width = 130,          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                          //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                          //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                        //   input,    width = 4,          .channel
		.sink1_data          (cmd_demux_001_src2_data),                           //   input,  width = 130,          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket),                    //   input,    width = 1,          .endofpacket
		.sink2_ready         (cmd_demux_002_src1_ready),                          //  output,    width = 1,     sink2.ready
		.sink2_valid         (cmd_demux_002_src1_valid),                          //   input,    width = 1,          .valid
		.sink2_channel       (cmd_demux_002_src1_channel),                        //   input,    width = 4,          .channel
		.sink2_data          (cmd_demux_002_src1_data),                           //   input,  width = 130,          .data
		.sink2_startofpacket (cmd_demux_002_src1_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src1_endofpacket),                    //   input,    width = 1,          .endofpacket
		.sink3_ready         (cmd_demux_003_src1_ready),                          //  output,    width = 1,     sink3.ready
		.sink3_valid         (cmd_demux_003_src1_valid),                          //   input,    width = 1,          .valid
		.sink3_channel       (cmd_demux_003_src1_channel),                        //   input,    width = 4,          .channel
		.sink3_data          (cmd_demux_003_src1_data),                           //   input,  width = 130,          .data
		.sink3_startofpacket (cmd_demux_003_src1_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src1_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	Demo1_altera_merlin_multiplexer_1921_dkfuzfa cmd_mux_003 (
		.clk                 (clock_in_out_clk_clk),                              //   input,    width = 1,       clk.clk
		.reset               (intel_niosv_m_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                             //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_003_src_valid),                             //  output,    width = 1,          .valid
		.src_data            (cmd_mux_003_src_data),                              //  output,  width = 130,          .data
		.src_channel         (cmd_mux_003_src_channel),                           //  output,    width = 4,          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                     //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                       //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                              //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                              //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src3_channel),                            //   input,    width = 4,          .channel
		.sink0_data          (cmd_demux_src3_data),                               //   input,  width = 130,          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_001_src3_ready),                          //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_001_src3_valid),                          //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_001_src3_channel),                        //   input,    width = 4,          .channel
		.sink1_data          (cmd_demux_001_src3_data),                           //   input,  width = 130,          .data
		.sink1_startofpacket (cmd_demux_001_src3_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src3_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	Demo1_altera_merlin_demultiplexer_1921_5zn5tja rsp_demux (
		.clk                (clock_in_out_clk_clk),                              //   input,    width = 1,       clk.clk
		.reset              (intel_niosv_m_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_004_src_ready),                              //  output,    width = 1,      sink.ready
		.sink_channel       (router_004_src_channel),                            //   input,    width = 4,          .channel
		.sink_data          (router_004_src_data),                               //   input,  width = 130,          .data
		.sink_startofpacket (router_004_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink_valid         (router_004_src_valid),                              //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                               //  output,  width = 130,          .data
		.src0_channel       (rsp_demux_src0_channel),                            //  output,    width = 4,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                        //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                              //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                              //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_src1_data),                               //  output,  width = 130,          .data
		.src1_channel       (rsp_demux_src1_channel),                            //  output,    width = 4,          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	Demo1_altera_merlin_demultiplexer_1921_fjlmjay rsp_demux_001 (
		.clk                (clock_in_out_clk_clk),                              //   input,    width = 1,       clk.clk
		.reset              (intel_niosv_m_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_005_src_ready),                              //  output,    width = 1,      sink.ready
		.sink_channel       (router_005_src_channel),                            //   input,    width = 4,          .channel
		.sink_data          (router_005_src_data),                               //   input,  width = 130,          .data
		.sink_startofpacket (router_005_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink_valid         (router_005_src_valid),                              //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                          //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                          //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_001_src0_data),                           //  output,  width = 130,          .data
		.src0_channel       (rsp_demux_001_src0_channel),                        //  output,    width = 4,          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                    //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                          //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                          //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_001_src1_data),                           //  output,  width = 130,          .data
		.src1_channel       (rsp_demux_001_src1_channel),                        //  output,    width = 4,          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket),                    //  output,    width = 1,          .endofpacket
		.src2_ready         (rsp_demux_001_src2_ready),                          //   input,    width = 1,      src2.ready
		.src2_valid         (rsp_demux_001_src2_valid),                          //  output,    width = 1,          .valid
		.src2_data          (rsp_demux_001_src2_data),                           //  output,  width = 130,          .data
		.src2_channel       (rsp_demux_001_src2_channel),                        //  output,    width = 4,          .channel
		.src2_startofpacket (rsp_demux_001_src2_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src2_endofpacket   (rsp_demux_001_src2_endofpacket),                    //  output,    width = 1,          .endofpacket
		.src3_ready         (rsp_demux_001_src3_ready),                          //   input,    width = 1,      src3.ready
		.src3_valid         (rsp_demux_001_src3_valid),                          //  output,    width = 1,          .valid
		.src3_data          (rsp_demux_001_src3_data),                           //  output,  width = 130,          .data
		.src3_channel       (rsp_demux_001_src3_channel),                        //  output,    width = 4,          .channel
		.src3_startofpacket (rsp_demux_001_src3_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src3_endofpacket   (rsp_demux_001_src3_endofpacket)                     //  output,    width = 1,          .endofpacket
	);

	Demo1_altera_merlin_demultiplexer_1921_fjlmjay rsp_demux_002 (
		.clk                (clock_in_out_clk_clk),                              //   input,    width = 1,       clk.clk
		.reset              (intel_niosv_m_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_006_src_ready),                              //  output,    width = 1,      sink.ready
		.sink_channel       (router_006_src_channel),                            //   input,    width = 4,          .channel
		.sink_data          (router_006_src_data),                               //   input,  width = 130,          .data
		.sink_startofpacket (router_006_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink_valid         (router_006_src_valid),                              //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                          //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                          //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_002_src0_data),                           //  output,  width = 130,          .data
		.src0_channel       (rsp_demux_002_src0_channel),                        //  output,    width = 4,          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                    //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                          //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                          //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_002_src1_data),                           //  output,  width = 130,          .data
		.src1_channel       (rsp_demux_002_src1_channel),                        //  output,    width = 4,          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket),                    //  output,    width = 1,          .endofpacket
		.src2_ready         (rsp_demux_002_src2_ready),                          //   input,    width = 1,      src2.ready
		.src2_valid         (rsp_demux_002_src2_valid),                          //  output,    width = 1,          .valid
		.src2_data          (rsp_demux_002_src2_data),                           //  output,  width = 130,          .data
		.src2_channel       (rsp_demux_002_src2_channel),                        //  output,    width = 4,          .channel
		.src2_startofpacket (rsp_demux_002_src2_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src2_endofpacket   (rsp_demux_002_src2_endofpacket),                    //  output,    width = 1,          .endofpacket
		.src3_ready         (rsp_demux_002_src3_ready),                          //   input,    width = 1,      src3.ready
		.src3_valid         (rsp_demux_002_src3_valid),                          //  output,    width = 1,          .valid
		.src3_data          (rsp_demux_002_src3_data),                           //  output,  width = 130,          .data
		.src3_channel       (rsp_demux_002_src3_channel),                        //  output,    width = 4,          .channel
		.src3_startofpacket (rsp_demux_002_src3_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src3_endofpacket   (rsp_demux_002_src3_endofpacket)                     //  output,    width = 1,          .endofpacket
	);

	Demo1_altera_merlin_demultiplexer_1921_5zn5tja rsp_demux_003 (
		.clk                (clock_in_out_clk_clk),                              //   input,    width = 1,       clk.clk
		.reset              (intel_niosv_m_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_007_src_ready),                              //  output,    width = 1,      sink.ready
		.sink_channel       (router_007_src_channel),                            //   input,    width = 4,          .channel
		.sink_data          (router_007_src_data),                               //   input,  width = 130,          .data
		.sink_startofpacket (router_007_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink_valid         (router_007_src_valid),                              //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                          //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                          //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_003_src0_data),                           //  output,  width = 130,          .data
		.src0_channel       (rsp_demux_003_src0_channel),                        //  output,    width = 4,          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),                    //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                          //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                          //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_003_src1_data),                           //  output,  width = 130,          .data
		.src1_channel       (rsp_demux_003_src1_channel),                        //  output,    width = 4,          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)                     //  output,    width = 1,          .endofpacket
	);

	Demo1_altera_merlin_multiplexer_1921_xdehsyi rsp_mux (
		.clk                 (clock_in_out_clk_clk),                              //   input,    width = 1,       clk.clk
		.reset               (intel_niosv_m_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                                  //  output,  width = 130,          .data
		.src_channel         (rsp_mux_src_channel),                               //  output,    width = 4,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                              //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                              //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src0_channel),                            //   input,    width = 4,          .channel
		.sink0_data          (rsp_demux_src0_data),                               //   input,  width = 130,          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                          //  output,    width = 1,     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                          //   input,    width = 1,          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                        //   input,    width = 4,          .channel
		.sink1_data          (rsp_demux_001_src0_data),                           //   input,  width = 130,          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                    //   input,    width = 1,          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                          //  output,    width = 1,     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                          //   input,    width = 1,          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                        //   input,    width = 4,          .channel
		.sink2_data          (rsp_demux_002_src0_data),                           //   input,  width = 130,          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),                    //   input,    width = 1,          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                          //  output,    width = 1,     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                          //   input,    width = 1,          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                        //   input,    width = 4,          .channel
		.sink3_data          (rsp_demux_003_src0_data),                           //   input,  width = 130,          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	Demo1_altera_merlin_multiplexer_1921_xdehsyi rsp_mux_001 (
		.clk                 (clock_in_out_clk_clk),                              //   input,    width = 1,       clk.clk
		.reset               (intel_niosv_m_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                             //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_001_src_valid),                             //  output,    width = 1,          .valid
		.src_data            (rsp_mux_001_src_data),                              //  output,  width = 130,          .data
		.src_channel         (rsp_mux_001_src_channel),                           //  output,    width = 4,          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                     //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                       //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                              //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                              //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src1_channel),                            //   input,    width = 4,          .channel
		.sink0_data          (rsp_demux_src1_data),                               //   input,  width = 130,          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink1_ready         (rsp_demux_001_src1_ready),                          //  output,    width = 1,     sink1.ready
		.sink1_valid         (rsp_demux_001_src1_valid),                          //   input,    width = 1,          .valid
		.sink1_channel       (rsp_demux_001_src1_channel),                        //   input,    width = 4,          .channel
		.sink1_data          (rsp_demux_001_src1_data),                           //   input,  width = 130,          .data
		.sink1_startofpacket (rsp_demux_001_src1_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src1_endofpacket),                    //   input,    width = 1,          .endofpacket
		.sink2_ready         (rsp_demux_002_src1_ready),                          //  output,    width = 1,     sink2.ready
		.sink2_valid         (rsp_demux_002_src1_valid),                          //   input,    width = 1,          .valid
		.sink2_channel       (rsp_demux_002_src1_channel),                        //   input,    width = 4,          .channel
		.sink2_data          (rsp_demux_002_src1_data),                           //   input,  width = 130,          .data
		.sink2_startofpacket (rsp_demux_002_src1_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src1_endofpacket),                    //   input,    width = 1,          .endofpacket
		.sink3_ready         (rsp_demux_003_src1_ready),                          //  output,    width = 1,     sink3.ready
		.sink3_valid         (rsp_demux_003_src1_valid),                          //   input,    width = 1,          .valid
		.sink3_channel       (rsp_demux_003_src1_channel),                        //   input,    width = 4,          .channel
		.sink3_data          (rsp_demux_003_src1_data),                           //   input,  width = 130,          .data
		.sink3_startofpacket (rsp_demux_003_src1_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src1_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	Demo1_altera_merlin_multiplexer_1921_5vpg5tq rsp_mux_002 (
		.clk                 (clock_in_out_clk_clk),                              //   input,    width = 1,       clk.clk
		.reset               (intel_niosv_m_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                             //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_002_src_valid),                             //  output,    width = 1,          .valid
		.src_data            (rsp_mux_002_src_data),                              //  output,  width = 130,          .data
		.src_channel         (rsp_mux_002_src_channel),                           //  output,    width = 4,          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                     //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                       //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_001_src2_ready),                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_001_src2_valid),                          //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_001_src2_channel),                        //   input,    width = 4,          .channel
		.sink0_data          (rsp_demux_001_src2_data),                           //   input,  width = 130,          .data
		.sink0_startofpacket (rsp_demux_001_src2_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_001_src2_endofpacket),                    //   input,    width = 1,          .endofpacket
		.sink1_ready         (rsp_demux_002_src2_ready),                          //  output,    width = 1,     sink1.ready
		.sink1_valid         (rsp_demux_002_src2_valid),                          //   input,    width = 1,          .valid
		.sink1_channel       (rsp_demux_002_src2_channel),                        //   input,    width = 4,          .channel
		.sink1_data          (rsp_demux_002_src2_data),                           //   input,  width = 130,          .data
		.sink1_startofpacket (rsp_demux_002_src2_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (rsp_demux_002_src2_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	Demo1_altera_merlin_multiplexer_1921_5vpg5tq rsp_mux_003 (
		.clk                 (clock_in_out_clk_clk),                              //   input,    width = 1,       clk.clk
		.reset               (intel_niosv_m_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                             //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_003_src_valid),                             //  output,    width = 1,          .valid
		.src_data            (rsp_mux_003_src_data),                              //  output,  width = 130,          .data
		.src_channel         (rsp_mux_003_src_channel),                           //  output,    width = 4,          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),                     //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),                       //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_001_src3_ready),                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_001_src3_valid),                          //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_001_src3_channel),                        //   input,    width = 4,          .channel
		.sink0_data          (rsp_demux_001_src3_data),                           //   input,  width = 130,          .data
		.sink0_startofpacket (rsp_demux_001_src3_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_001_src3_endofpacket),                    //   input,    width = 1,          .endofpacket
		.sink1_ready         (rsp_demux_002_src3_ready),                          //  output,    width = 1,     sink1.ready
		.sink1_valid         (rsp_demux_002_src3_valid),                          //   input,    width = 1,          .valid
		.sink1_channel       (rsp_demux_002_src3_channel),                        //   input,    width = 4,          .channel
		.sink1_data          (rsp_demux_002_src3_data),                           //   input,  width = 130,          .data
		.sink1_startofpacket (rsp_demux_002_src3_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (rsp_demux_002_src3_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

endmodule

